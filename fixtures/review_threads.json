{"data":{"repository":{"pullRequest":{"reviewThreads":{"nodes":[{"id":"PRRT_kwDOQC8mVc5eUI2_","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5td","databaseId":2438437725,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Add blank lines before headings for markdown compliance.**\n\nThe markdown linter flags missing blank lines before section headings (lines 5 and 10). Adding blank lines improves readability and ensures compliance with markdown best practices.\n\n\n\nApply this diff to fix the formatting:\n\n```diff\n This directory stores research artifacts, design critiques, and visual references pulled from external collaborators. Use them to inform UX and copy decisions.\n \n+\n ## Contents\n - `CleanShot*.png`: Screenshots of the current report layout. Reference them when updating layouts or comparing regressions.\n - `Pasted-*.txt`: Narrative feedback, design reviews, and strategy notes. Scan the most recent files before reworking report sections or messaging.\n \n+\n ## Usage Tips\n - Keep new assets additive—never overwrite existing references. Prefix new files with ISO timestamps to preserve chronology.\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~1-~1: Use correct spacing\nContext: # Attached Assets Agent Guide  This directory stores research artifacts...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~3-~3: There might be a problem here.\nContext: ...se them to inform UX and copy decisions.  ## Contents - `CleanShot*.png`: Screenshots of the current report layou...\n\n(QB_NEW_EN_MERGED_MATCH)\n\n---\n\n[grammar] ~7-~7: Use correct spacing\nContext: ... reworking report sections or messaging.  ## Usage Tips - Keep new assets additive—ne...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~12-~12: Use correct spacing\nContext: ...-specific details, redact before adding.  Document incoming artifacts here so futu...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.18.1)</summary>\n\n5-5: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n10-10: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn attached_assets/AGENTS.md around lines 1 to 14, the markdown headings \"##\nContents\" (line ~5) and \"## Usage Tips\" (line ~10) are missing a blank line\nabove them; insert a single blank line before each of those heading lines (and\ngenerally ensure any heading has a preceding blank line) to satisfy the markdown\nlinter and improve readability, then re-run the linter to confirm compliance.\n```\n\n</details>\n\n<!-- This is an auto-generated reply by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437725","path":"attached_assets/AGENTS.md","line":14},{"id":"PRRC_kwDOQC8mVc6RcySj","databaseId":2440242339,"author":{"login":"benvenker"},"body":"Thanks! Added the extra spacing so both headings now have blank lines before and after them. Confirmed with markdownlint-cli2 that the blanks-around-headings rule no longer triggers (only pre-existing MD013 line-length warnings remain).","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2440242339","path":"attached_assets/AGENTS.md","line":14},{"id":"PRRC_kwDOQC8mVc6RcyvM","databaseId":2440244172,"author":{"login":"coderabbitai"},"body":"@benvenker, perfect! Thank you for addressing the markdown formatting. Great job confirming the fix with the linter—the blank lines around headings are now compliant. The MD013 line-length warnings are minor and can be addressed separately if needed. ✨\n\n---\n\n<details>\n<summary>🧠 Learnings used</summary>\n\n```\nLearnt from: CR\nPR: benvenker/dspy-agents#0\nFile: AGENTS.md:0-0\nTimestamp: 2025-09-25T21:07:29.520Z\nLearning: Applies to AGENTS.md : Keep the root AGENTS.md concise and link to sub-guides for details\n```\n\n</details>\n\n\n\n<!-- This is an auto-generated reply by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2440244172","path":"attached_assets/AGENTS.md","line":14}]}},{"id":"PRRT_kwDOQC8mVc5eUI3E","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5ti","databaseId":2438437730,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Fix markdown heading spacing (MD022) for render/lint cleanliness**\n\nInsert blank lines after headings to satisfy markdownlint and improve readability. Also keep this root guide concise and link out to sub‑guides (you already do at the end). Based on learnings\n\n\n```diff\n ## Entry Points\n+ \n - `index.html` bootstraps the Vite app; SPA routing happens entirely in React.\n ...\n ## View Flow\n+ \n - `src/pages/Home.tsx` orchestrates the three-stage demo (`\"intake\" → \"scanning\" → \"results\"`). Event handlers flip between stages and leverage `mockScanResult` until real APIs arrive.\n ...\n ## State & Data\n+ \n - Global server data should be managed with TanStack Query; configure new queries in `src/lib/queryClient.ts` and create hooks under `src/hooks/` if shared.\n ...\n ## Component System\n+ \n - Reusable blocks sit in `src/components/`. Larger report modules (Executive Summary, Appendix, Fix Cards) are top-level files; primitives live in `src/components/ui/` (shadcn-inspired).\n ...\n ## Styling Notes\n+ \n - Tailwind is already wired with design tokens (`bg-background`, `text-muted-foreground`, etc.). Use semantic tokens instead of raw hex codes.\n ...\n ## Testing & QA\n+ \n - Run `npm run dev` (from project root) to get live reloading. Vite middleware proxies through the Express server, so API changes and UI changes update together.\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~5-~5: Use correct spacing\nContext: ...t, and design fidelity.  ## Entry Points - `index.html` bootstraps the Vite app; SPA routing hap...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~6-~6: There might be a problem here.\nContext: ...; SPA routing happens entirely in React. - `src/main.tsx` mounts `App` and applies global CSS from...\n\n(QB_NEW_EN_MERGED_MATCH)\n\n---\n\n[grammar] ~7-~7: There might be a problem here.\nContext: ...applies global CSS from `src/index.css`. - `src/App.tsx` wires core providers (`QueryClientProvid...\n\n(QB_NEW_EN_MERGED_MATCH)\n\n---\n\n[grammar] ~8-~8: Use correct spacing\nContext: ...y exposes `/` and a catch-all 404 route.  ## View Flow - `src/pages/Home.tsx` orchest...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~10-~10: Use correct spacing\nContext: ...and a catch-all 404 route.  ## View Flow - `src/pages/Home.tsx` orchestrates the three-stage demo (`\"int...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~12-~12: Use correct spacing\nContext: ...until real APIs arrive. - `ScanProgress` accepts a `duration` for simulated scans...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~12-~12: There might be a problem here.\nContext: ... cancellable when integrating live data. - `ReportResultsDashboard` renders the printable/reporting layout; ...\n\n(QB_NEW_EN_MERGED_MATCH)\n\n---\n\n[grammar] ~13-~13: Use correct spacing\nContext: ...odes in sync via shared data structures.  ## State & Data - Global server data should...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~18-~18: Use correct spacing\nContext: ...ring formatting logic across components.  ## Component System - Reusable blocks sit i...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~23-~23: There might be a mistake here.\nContext: ...elines.md`. - `src/components/examples/` contains reference patterns; update thes...\n\n(QB_NEW_EN_OTHER)\n\n---\n\n[grammar] ~23-~23: Use correct spacing\nContext: ...ese when introducing new visual systems.  ## Styling Notes - Tailwind is already wire...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~28-~28: There might be a mistake here.\nContext: ...s and motion subtle; `framer-motion` is available but use it sparingly to maintain report...\n\n(QB_NEW_EN_OTHER)\n\n---\n\n[grammar] ~28-~28: Use correct spacing\nContext: ...ngly to maintain report professionalism.  ## Testing & QA - Run `npm run dev` (from p...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~33-~33: Use correct spacing\nContext: ... layout regressions in PDF/export views.  For component-specific patterns, continu...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.18.1)</summary>\n\n5-5: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n10-10: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n15-15: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n20-20: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n25-25: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n30-30: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/AGENTS.md around lines 5 to 33, several second-level headings (e.g.,\n\"## Entry Points\", \"## View Flow\", \"## State & Data\", \"## Component System\", \"##\nStyling Notes\", \"## Testing & QA\") lack a blank line after them which triggers\nMD022; fix by inserting a single blank line immediately after each heading\nthroughout that range so every heading is followed by one empty line, rewrap any\naffected paragraphs if needed, and re-run markdownlint to confirm the MD022\nerror is resolved.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437730","path":"client/AGENTS.md","line":33}]}},{"id":"PRRT_kwDOQC8mVc5eUI3K","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5tp","databaseId":2438437737,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Add blank lines before headings for markdown compliance.**\n\nThe markdown linter flags missing blank lines before section headings (lines 5, 12, 19, 24). Adding blank lines improves readability and follows markdown best practices.\n\n\n\nApply this diff to fix the formatting:\n\n```diff\n This folder holds the building blocks for both the interactive dashboard and the printable report. Respect the separation between high-level report modules, workflow components, and low-level primitives.\n \n+\n ## Folder Structure\n - **Workflow Components**: `IntakeForm`, `ScanProgress`, `ResultsDashboard` – manage flow-specific UX.\n - **Report Components**: `ReportResultsDashboard`, `ReportHeader`, `ReportFooter`, `ExecutiveSummary`, `ReportAppendix`, `EvidenceTable`, etc. Treat these as the canonical printable layout.\n - **Shared Blocks**: `FixCard`, `ReportFixCard`, `ScoreDisplay`, `SubScoreCard(s)` encapsulate reusable visuals. Keep their APIs stable and data-agnostic.\n - **Primitives**: `ui/` re-exports shadcn-inspired components. Prefer extending them (via props) instead of forking.\n - **Examples**: `examples/` stores exploratory UI compositions; they are safe sandboxes but should mirror production-ready patterns.\n \n+\n ## Authoring Guidelines\n - Keep components pure and prop-driven; local state should be minimal and focused on UI interaction.\n```\n\nContinue this pattern for the remaining sections (lines 19 and 24).\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~1-~1: Use correct spacing\nContext: # Components Agent Guide  This folder holds the building blocks fo...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~3-~3: Use correct spacing\nContext: ...ow components, and low-level primitives.  ## Folder Structure - **Workflow Components...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~5-~5: There might be a mistake here.\nContext: ...w-level primitives.  ## Folder Structure - **Workflow Components**: `IntakeForm`, `Sc...\n\n(QB_NEW_EN)\n\n---\n\n[grammar] ~6-~6: There might be a mistake here.\nContext: ...onents**: `IntakeForm`, `ScanProgress`, `ResultsDashboard` – manage flow-specific UX. - **Report Components...\n\n(QB_NEW_EN_OTHER)\n\n---\n\n[grammar] ~6-~6: There might be a mistake here.\nContext: ...ltsDashboard` – manage flow-specific UX. - **Report Components**: `ReportResultsDashb...\n\n(QB_NEW_EN)\n\n---\n\n[grammar] ~8-~8: Insert the missing word\nContext: ...ixCard`, `ReportFixCard`, `ScoreDisplay`, `SubScoreCard(s)` encapsulate reusable ...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_32)\n\n---\n\n[grammar] ~10-~10: Use correct spacing\nContext: ...should mirror production-ready patterns.  ## Authoring Guidelines - Keep components p...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~16-~16: Consider adjusting word choice based on regional variation\nContext: ...ib/utils.ts` for conditional styling. - Favour semantic Tailwind tokens (`text-muted-f...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_26)\n\n---\n\n[grammar] ~17-~17: Use correct spacing\nContext: ...d cluttering JSX with redundant remarks.  ## Accessibility & Report Fidelity - Use Ra...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~21-~21: Use articles correctly\nContext: ...es. - Report components should maintain a 8px-based spacing rhythm and align to t...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_11)\n\n---\n\n[grammar] ~21-~21: There might be a mistake here.\nContext: ...gn references in `design_guidelines.md`. - Keep exported PDFs in mind: avoid relyin...\n\n(QB_NEW_EN)\n\n---\n\n[grammar] ~22-~22: There might be a mistake here.\nContext: ...oid relying on animations or hover-only affordances and ensure colors meet contrast ratios....\n\n(QB_NEW_EN_OTHER)\n\n---\n\n[grammar] ~22-~22: Use correct spacing\nContext: ... and ensure colors meet contrast ratios.  ## When Extending - Add new primitives unde...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~27-~27: Use correct spacing\nContext: ...ponent; do not embed data fetching here.  Continue into `ui/AGENTS.md` for primiti...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.18.1)</summary>\n\n5-5: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n12-12: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n19-19: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n24-24: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/AGENTS.md lines 1-29, several section headings are\nmissing a blank line before them (reported at lines ~5, 12, 19, 24); insert a\nsingle empty line immediately above each heading (e.g., before \"Folder\nStructure\", \"Authoring Guidelines\", \"Accessibility & Report Fidelity\", \"When\nExtending\") to satisfy markdown linter rules and improve readability, then\nre-run the markdown linter to confirm no further heading-spacing violations.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437737","path":"client/src/components/AGENTS.md","line":29}]}},{"id":"PRRT_kwDOQC8mVc5eUI3R","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5t1","databaseId":2438437749,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Don’t mutate props; add fallbacks for steps/doc label.**\n\n- `.sort` mutates `fixCards` (a prop). Use a copy.\n- `steps` assumed present; guard like `technicalSteps`.\n- Use a fallback for `documentationLabel` when link exists.\n\n```diff\n-  const body = fixCards\n-    .sort((a, b) => a.priority - b.priority)\n+  const body = [...fixCards]\n+    .sort((a, b) => a.priority - b.priority)\n     .map((card) => {\n@@\n-      const nonTechnical = card.steps\n-        .map((step, index) => `${index + 1}. ${step}`)\n-        .join(\"\\n\");\n+      const nonTechnical = card.steps?.length\n+        ? card.steps.map((step, index) => `${index + 1}. ${step}`).join(\"\\n\")\n+        : \"(No client-facing steps provided yet.)\";\n@@\n-      const documentation = card.documentationLink\n-        ? `[${card.documentationLabel}](${card.documentationLink})`\n+      const documentation = card.documentationLink\n+        ? `[${card.documentationLabel ?? \"Reference\"}](${card.documentationLink})`\n         : \"(No external reference provided)\";\n```\n\n\nAlso applies to: 25-31\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/DeveloperGuideDownload.tsx around lines 16-18 (and\nsimilarly lines 25-31), the code mutates the fixCards prop by calling .sort on\nit, assumes steps exists, and doesn't provide a fallback label for documentation\nlinks; fix by creating a shallow copy before sorting (e.g., [...fixCards] or\nArray.from(fixCards]), use that copy for .sort and .map to avoid mutating props,\nguard access to technical steps with a safe variable like const technicalSteps =\ncard.steps || card.technicalSteps || [] (or check card.steps before mapping),\nand when rendering documentation links use a fallback label (e.g.,\ndocumentationLabel || 'Documentation' or derive from the link) so a label is\nalways shown.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437749","path":"client/src/components/DeveloperGuideDownload.tsx","line":29}]}},{"id":"PRRT_kwDOQC8mVc5eUI3U","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5t5","databaseId":2438437753,"author":{"login":"coderabbitai"},"body":"_🛠️ Refactor suggestion_ | _🟠 Major_\n\n**Slugify filename to avoid invalid characters.**\n\nSpaces are handled, but slashes and punctuation can break downloads.\n\n```diff\n-    const link = document.createElement(\"a\");\n+    const link = document.createElement(\"a\");\n     link.href = url;\n-    link.download = `${businessName.replace(/\\s+/g, \"-\").toLowerCase()}-developer-guide.md`;\n+    const safeName = businessName\n+      .trim()\n+      .toLowerCase()\n+      .replace(/[^a-z0-9]+/g, \"-\")\n+      .replace(/-+/g, \"-\")\n+      .replace(/^-|-$/g, \"\");\n+    link.download = `${safeName}-developer-guide.md`;\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const handleDownload = () => {\n    const blob = new Blob([markdown], { type: \"text/markdown\" });\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement(\"a\");\n    link.href = url;\n    const safeName = businessName\n      .trim()\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/-+/g, \"-\")\n      .replace(/^-|-$/g, \"\");\n    link.download = `${safeName}-developer-guide.md`;\n    document.body.appendChild(link);\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/DeveloperGuideDownload.tsx around lines 59-66, the\ngenerated download filename only replaces spaces and can still contain slashes\nor punctuation that break downloads; replace any sequence of non-alphanumeric\ncharacters with a single hyphen, trim leading/trailing hyphens, convert to\nlowercase, and ensure a non-empty fallback (e.g., \"download\") before appending\nthe \"-developer-guide.md\" suffix so the filename is a safe slug.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437753","path":"client/src/components/DeveloperGuideDownload.tsx","line":86}]}},{"id":"PRRT_kwDOQC8mVc5eUI3a","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5uB","databaseId":2438437761,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Prevent consumer `buttonProps.onClick` from overriding download; compose handlers and merge classNames.**\n\nSpreading `buttonProps` after `onClick` can override the download handler, and `className` isn’t merged.\n\n```diff\n-export default function DeveloperGuideDownload({ fixCards, businessName, label = \"Download Developer Guide (.md)\", buttonProps }: DeveloperGuideDownloadProps) {\n+export default function DeveloperGuideDownload({ fixCards, businessName, label = \"Download Developer Guide (.md)\", buttonProps }: DeveloperGuideDownloadProps) {\n   const markdown = useMemo(() => generateMarkdown(fixCards, businessName), [fixCards, businessName]);\n@@\n-  return (\n-    <Button\n-      onClick={handleDownload}\n-      className=\"gap-2\"\n-      variant=\"outline\"\n-      size=\"sm\"\n-      {...buttonProps}\n-    >\n+  const { onClick: onClickProp, className: classNameProp, ...rest } = buttonProps ?? {};\n+  const onClick: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n+    onClickProp?.(e);\n+    if (!e.defaultPrevented) handleDownload();\n+  };\n+  return (\n+    <Button\n+      onClick={onClick}\n+      className={[\"gap-2\", classNameProp].filter(Boolean).join(\" \")}\n+      variant=\"outline\"\n+      size=\"sm\"\n+      {...rest}\n+    >\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const { onClick: onClickProp, className: classNameProp, ...rest } = buttonProps ?? {};\n  const onClick: React.MouseEventHandler<HTMLButtonElement> = (e) => {\n    onClickProp?.(e);\n    if (!e.defaultPrevented) handleDownload();\n  };\n  return (\n    <Button\n      onClick={onClick}\n      className={[\"gap-2\", classNameProp].filter(Boolean).join(\" \")}\n      variant=\"outline\"\n      size=\"sm\"\n      {...rest}\n    >\n      <FileDown className=\"h-4 w-4\" />\n      {label}\n    </Button>\n  );\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/DeveloperGuideDownload.tsx around lines 72 to 82,\nspreading buttonProps after onClick can let a consumer-supplied onClick override\nthe download handler and the className isn't merged; fix by creating a composed\nonClick that calls the consumer onClick (if present) and then calls\nhandleDownload (or calls handleDownload first then consumer handler if ordering\nmatters), set that composed function as the onClick prop instead of spreading\nbuttonProps.onClick, and merge className values (e.g., combine \"gap-2\" with\nbuttonProps.className) before spreading the rest of buttonProps so both handlers\nrun and class names are preserved.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437761","path":"client/src/components/DeveloperGuideDownload.tsx","line":102}]}},{"id":"PRRT_kwDOQC8mVc5eUI3f","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5uH","databaseId":2438437767,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Fix misleading/industry-specific copy (average ≠ percentile; hard‑coded “HVAC”).**\n\n- Saying “Ahead of roughly ${industryAverage}% of HVAC contractors” misinterprets an average score as a percentile and hard‑codes an industry. This will be wrong for non‑HVAC businesses and statistically inaccurate.\n\n\nApply this diff to make the copy accurate and industry‑agnostic:\n\n```diff\n-  const comparisonCopy = score > industryAverage\n-    ? `Ahead of roughly ${industryAverage}% of HVAC contractors in your market.`\n-    : \"Trailing local competitors in AI visibility—address the gaps below.\";\n+  const comparisonCopy =\n+    score > industryAverage\n+      ? `Above the industry average (${industryAverage}).`\n+      : `Below the industry average (${industryAverage}).`;\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const comparisonCopy =\n    score > industryAverage\n      ? `Above the industry average (${industryAverage}).`\n      : `Below the industry average (${industryAverage}).`;\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/ExecutiveSummary.tsx around lines 24 to 27, the copy\nwrongly treats industryAverage as a percentile and hard-codes “HVAC”; update the\ntwo conditional strings to be industry‑agnostic and accurate about being an\naverage (not a percentile). Replace the true branch with copy like “Above the\nlocal market average of {industryAverage}%—see details below.” and the false\nbranch with “Below the local market average—see areas to improve below.” Ensure\nyou do not reference a specific industry, do not imply percentile, and format\nindustryAverage as a rounded percentage for display.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437767","path":"client/src/components/ExecutiveSummary.tsx","line":35}]}},{"id":"PRRT_kwDOQC8mVc5eUI3j","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5uL","databaseId":2438437771,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n<details>\n<summary>🧩 Analysis chain</summary>\n\n**Clamp scores to [0,100] for display logic; add minor a11y.**\n\nGuard against out-of-range inputs to keep visuals predictable and avoid misleading labels.\n\n```diff\n export default function ImprovementHero({\n@@\n }: ImprovementHeroProps) {\n-  const gainLabel = `+${pointGainRange} points`;\n-  const difference = Math.max(0, potentialScore - currentScore);\n+  const safeCurrent = Math.min(100, Math.max(0, currentScore));\n+  const safePotential = Math.min(100, Math.max(0, potentialScore));\n+  const gainLabel = `+${pointGainRange} points`;\n+  const difference = Math.max(0, safePotential - safeCurrent);\n   const differenceLabel = difference > 0 ? `${difference}+ points` : gainLabel;\n@@\n-                  <span className=\"metric-emphasis\">{currentScore}</span>\n+                  <span className=\"metric-emphasis\">{safeCurrent}</span>\n@@\n-                  <span className=\"metric-emphasis\">{potentialScore}+</span>\n+                  <span className=\"metric-emphasis\">{safePotential}+</span>\n@@\n-                  <div\n+                  <div\n                     className=\"h-3 rounded-full bg-gradient-to-r from-blue-500 to-blue-700 shadow-sm\"\n                     style={{\n-                      width: `${Math.min(100, Math.max(0, (potentialScore / 100) * 100))}%`,\n+                      width: `${safePotential}%`,\n                     }}\n                     aria-hidden=\"true\"\n                   />\n```\n\nAnd make the decorative ArrowDownRight ignored by screen readers:\n```diff\n-          <p className=\"flex items-center gap-2 text-sm font-medium text-slate-600\">\n-            <ArrowDownRight className=\"h-5 w-5 text-blue-600\" />\n+          <p className=\"flex items-center gap-2 text-sm font-medium text-slate-600\">\n+            <ArrowDownRight className=\"h-5 w-5 text-blue-600\" aria-hidden=\"true\" />\n```\n\nEnsure callers pass scores as numbers within [0,100] going forward. <!-- review_comment_end -->\n\n\nAlso applies to: 48-52, 59-63, 68-76\n\n---\n\n```\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Find ImprovementHero component definition and its props interface\nfd -t f ImprovementHero.tsx --exec cat {} \\;\n```\n\nLength of output: 4461\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Search for usages of ImprovementHero component\nrg -n \"ImprovementHero\" --type=tsx --type=ts -C2\n```\n\nLength of output: 27\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check for any existing score validation/clamping logic in parent components\nrg -n \"currentScore|potentialScore\" --type=tsx --type=ts -C3\n```\n\nLength of output: 27\n\n---\n\n```\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Search for ImprovementHero imports and usage (without type constraint)\nrg -n \"ImprovementHero\" -C3\n```\n\nLength of output: 2818\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Find all tsx/jsx files that import or use ImprovementHero\nfd -e tsx -e jsx -e ts -e js | head -20\n```\n\nLength of output: 784\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Search for where currentScore or potentialScore are passed to ImprovementHero\nrg -n \"currentScore\\s*=\" -C5 | head -50\n```\n\nLength of output: 877\n\n---\n\n\n\n</details>\n\n**Add aria-hidden to ArrowDownRight; consider clamping scores defensively.**\n\nThe ArrowDownRight icon should be hidden from screen readers as it's purely decorative. The proposed clamping [0,100] on displayed scores is defensive programming—currently the component receives `result.overallScore` from ReportResultsDashboard without visible range violations, but adding upper bounds prevents misleading labels if invalid data reaches it.\n\n```diff\n  const gainLabel = `+${pointGainRange} points`;\n- const difference = Math.max(0, potentialScore - currentScore);\n+ const safeCurrent = Math.min(100, Math.max(0, currentScore));\n+ const safePotential = Math.min(100, Math.max(0, potentialScore));\n+ const difference = Math.max(0, safePotential - safeCurrent);\n  const differenceLabel = difference > 0 ? `${difference}+ points` : gainLabel;\n```\n\n```diff\n- <span className=\"metric-emphasis\">{currentScore}</span>\n+ <span className=\"metric-emphasis\">{safeCurrent}</span>\n```\n\n```diff\n- <span className=\"metric-emphasis\">{potentialScore}+</span>\n+ <span className=\"metric-emphasis\">{safePotential}+</span>\n```\n\n```diff\n  width: `${Math.min(100, Math.max(0, (potentialScore / 100) * 100))}%`,\n+ width: `${safePotential}%`,\n```\n\n```diff\n  <p className=\"flex items-center gap-2 text-sm font-medium text-slate-600\">\n-   <ArrowDownRight className=\"h-5 w-5 text-blue-600\" />\n+   <ArrowDownRight className=\"h-5 w-5 text-blue-600\" aria-hidden=\"true\" />\n```\n\nAlso applies to: 48-52, 59-63, 68-76\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437771","path":"client/src/components/ImprovementHero.tsx","line":33}]}},{"id":"PRRT_kwDOQC8mVc5eUI3q","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5uR","databaseId":2438437777,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**CTAs are inert; expose handlers or hrefs so users can act.**\n\nBoth buttons render with no onClick/href, blocking the primary flows.\n\n\nExpose optional props and wire them:\n\n```diff\n-interface NextStepsProps {\n+interface NextStepsProps {\n   fixCards: FixCard[];\n   businessName: string;\n+  onRequestQuoteClick?: () => void;\n+  onBookCallClick?: () => void;\n }\n \n-export default function NextSteps({ fixCards, businessName }: NextStepsProps) {\n+export default function NextSteps({ fixCards, businessName, onRequestQuoteClick, onBookCallClick }: NextStepsProps) {\n@@\n-            <Button size=\"sm\" className=\"mt-auto w-full bg-white text-blue-700 hover:bg-blue-50\">\n+            <Button size=\"sm\" className=\"mt-auto w-full bg-white text-blue-700 hover:bg-blue-50\" onClick={onRequestQuoteClick}>\n               Request full-service quote\n             </Button>\n@@\n-            <Button variant=\"outline\" size=\"sm\" className=\"mt-auto w-full\">\n+            <Button variant=\"outline\" size=\"sm\" className=\"mt-auto w-full\" onClick={onBookCallClick}>\n               Book a call\n             </Button>\n```\nIf you prefer links, use `Button asChild` wrapping a Next.js `Link` or `<a href=\"mailto:...\">`. <!-- review_comment_end -->\n\n\nAlso applies to: 56-58\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/NextSteps.tsx around lines 37-39 (and also 56-58), the\nCTA Buttons are rendered without handlers or hrefs making them inert; update the\ncomponent props to accept optional onClick?: () => void and href?: string (or a\nLinkProps-compatible prop) and forward those to the Button instances. If href is\nprovided, render Button with asChild wrapping a Next.js Link or an <a\nhref=\"...\"> (supporting mailto:) so native navigation works; otherwise pass\nonClick to Button. Update the component's TypeScript types/prop interface\naccordingly and ensure tests/types reflect the optional props.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437777","path":"client/src/components/NextSteps.tsx","line":46}]}},{"id":"PRRT_kwDOQC8mVc5eUI3s","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5uW","databaseId":2438437782,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Avoid hardcoded ZIP fallback (“60657”)**\n\nPassing a real ZIP as default can mislead users. Prefer omitting ZIP or rendering a placeholder if missing.\n\n\n```diff\n-        zip={result.zip || \"60657\"}\n+        zip={result.zip ?? undefined}\n```\n\nIf ReportHeader requires a string, render conditionally instead of supplying a fake value.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/ReportResultsDashboard.tsx around lines 24-25, the code\nsupplies a hardcoded ZIP fallback \"60657\" which can mislead users; instead,\nremove the fake default and pass zip only when present or pass a\nplaceholder/empty string when ReportHeader strictly requires a string. Update\nthe JSX to conditionally include the zip prop (or set it to an explicit\nplaceholder like \"\" or \"—\") and, if ReportHeader types require a string, change\nits prop typing to accept string | undefined or handle undefined internally so\nno real ZIP is hardcoded.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437782","path":"client/src/components/ReportResultsDashboard.tsx","line":31}]}},{"id":"PRRT_kwDOQC8mVc5eUI3x","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5ua","databaseId":2438437786,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Guard against non-finite input (NaN/Infinity).**\n\nWithout a guard, `clampedScore` and `strokeDashoffset` can become `NaN`, breaking the ring.\n\n```diff\n-export default function ScoreDisplay({ score, label = \"AI-Search Readiness Score\" }: ScoreDisplayProps) {\n-  const clampedScore = Math.max(0, Math.min(100, score));\n+export default function ScoreDisplay({ score, label = \"AI-Search Readiness Score\" }: ScoreDisplayProps) {\n+  const normalized = Number.isFinite(score) ? score : 0;\n+  const clampedScore = Math.max(0, Math.min(100, normalized));\n   const displayScore = Math.round(clampedScore);\n```\n\n\nAlso applies to: 24-26\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/ScoreDisplay.tsx around lines 7-9 (also apply same fix\nto lines 24-26), the code currently clamps and rounds score without guarding\nagainst non-finite inputs, which can produce NaN/Infinity and break the ring;\nupdate the logic to first coerce/validate the input with Number.isFinite (or\nglobal isFinite) and default to 0 when the value is not finite, then perform\nMath.max/Math.min clamping and Math.round on that finite value, and ensure any\ndownstream calculation (e.g., strokeDashoffset) uses the validated finite\nnumber.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437786","path":"client/src/components/ScoreDisplay.tsx","line":16}]}},{"id":"PRRT_kwDOQC8mVc5eUI36","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5uk","databaseId":2438437796,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Add blank lines before headings for markdown compliance.**\n\nThe markdown linter flags missing blank lines before section headings (lines 5, 10). Adding blank lines improves readability and follows markdown best practices.\n\n\n\nApply this diff to fix the formatting:\n\n```diff\n These files originate from the shadcn/ui registry and provide the primitive building blocks for the rest of the interface. Treat them as shared infrastructure.\n \n+\n ## Modification Rules\n - Avoid stylistic churn. Update tokens or theme values in `tailwind.config.ts` or the utility helpers before editing component internals.\n - Keep API parity with the upstream shadcn components when possible. When you must diverge, document the change at the top of the file.\n - Import `cn` from `@/lib/utils` for class merging; do not reimplement class concatenation per component.\n \n+\n ## Adding Primitives\n - First, confirm the pattern is not already covered. Many components (e.g., dialog, dropdown, tabs) are available—reuse them.\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n# UI Primitives Agent Guide\n\nThese files originate from the shadcn/ui registry and provide the primitive building blocks for the rest of the interface. Treat them as shared infrastructure.\n\n\n## Modification Rules\n- Avoid stylistic churn. Update tokens or theme values in `tailwind.config.ts` or the utility helpers before editing component internals.\n- Keep API parity with the upstream shadcn components when possible. When you must diverge, document the change at the top of the file.\n- Import `cn` from `@/lib/utils` for class merging; do not reimplement class concatenation per component.\n\n\n## Adding Primitives\n- First, confirm the pattern is not already covered. Many components (e.g., dialog, dropdown, tabs) are available—reuse them.\n- If a new primitive is required, scaffold it via the shadcn CLI or copy a known-good implementation, then adapt typography and spacing to match our design system.\n- Keep story/demo usage up to date in `client/src/components/examples/` so downstream consumers understand the intended API.\n\n## TypeScript & Accessibility\n- Maintain explicit prop types and forward `ref`s where appropriate (`React.forwardRef` is the norm here).\n- Preserve ARIA attributes and keyboard interactions from upstream implementations; they are critical for accessibility compliance.\n- When adding optional behaviours (e.g., variants), ensure default props keep existing consumers backwards-compatible.\n\nIf a change impacts higher-level components, notify the owners by updating the relevant `AGENTS.md` files.\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~1-~1: Use correct spacing\nContext: # UI Primitives Agent Guide  These files originate from the shadcn/ui...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~3-~3: Use correct spacing\nContext: ...ce. Treat them as shared infrastructure.  ## Modification Rules - Avoid stylistic chu...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~8-~8: Use correct spacing\nContext: ...ement class concatenation per component.  ## Adding Primitives - First, confirm the p...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~13-~13: Use correct spacing\nContext: ...m consumers understand the intended API.  ## TypeScript & Accessibility - Maintain ex...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~18-~18: Consider adjusting word choice based on regional variation\nContext: ...lity compliance. - When adding optional behaviours (e.g., variants), ensure default props ...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_26)\n\n---\n\n[grammar] ~18-~18: Use hyphens correctly\nContext: ... props keep existing consumers backwards-compatible.  If a change impacts higher-...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_29)\n\n---\n\n[grammar] ~18-~18: Use correct spacing\nContext: ...existing consumers backwards-compatible.  If a change impacts higher-level compone...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.18.1)</summary>\n\n5-5: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n10-10: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/ui/AGENTS.md around lines 1 to 20, the markdown is\nmissing blank lines before the second- and third-level headings (the \"##\nModification Rules\" and \"## Adding Primitives\" sections flagged at lines ~5 and\n~10); fix by inserting a single blank line immediately before each of those\nheading lines so every heading is preceded by an empty line, preserving existing\ncontent and spacing elsewhere.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437796","path":"client/src/components/ui/AGENTS.md","line":20}]}},{"id":"PRRT_kwDOQC8mVc5eUI4C","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5uw","databaseId":2438437808,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Add blank lines before headings for markdown compliance.**\n\nThe markdown linter flags missing blank lines before section headings (lines 5, 10). Adding blank lines improves readability and follows markdown best practices.\n\n\n\nApply this diff to fix the formatting:\n\n```diff\n Reusable client-side hooks live here. They encapsulate cross-cutting behaviour so pages and components stay declarative.\n \n+\n ## Existing Hooks\n - `use-mobile.tsx`: Detects viewport size for responsive adjustments.\n - `use-toast.ts`: Exposes the shadcn toaster API.\n - `useScanMutation.ts`: Starts a backend scan job and returns the queued scan ID.\n - `useScanStatus.ts`: Polls scan status and stops automatically when completed or failed.\n \n+\n ## Guidelines\n - Group shared behaviour (API orchestration, feature flags, analytics) into hooks rather than repeating logic across components.\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n# Hooks Agent Guide\n\nReusable client-side hooks live here. They encapsulate cross-cutting behaviour so pages and components stay declarative.\n\n\n## Existing Hooks\n- `use-mobile.tsx`: Detects viewport size for responsive adjustments.\n- `use-toast.ts`: Exposes the shadcn toaster API.\n- `useScanMutation.ts`: Starts a backend scan job and returns the queued scan ID.\n- `useScanStatus.ts`: Polls scan status and stops automatically when completed or failed.\n\n\n## Guidelines\n- Group shared behaviour (API orchestration, feature flags, analytics) into hooks rather than repeating logic across components.\n- Prefix asynchronous hooks with `use` and return typed values/actions. Validate incoming data using helpers from `client/src/lib`.\n- When adding hooks that depend on TanStack Query, co-locate query keys/constants here for reuse.\n\nNote new hooks in this file and describe their responsibilities succinctly.\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~1-~1: Use correct spacing\nContext: # Hooks Agent Guide  Reusable client-side hooks live here. Th...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~3-~3: Consider adjusting word choice based on regional variation\nContext: ...ve here. They encapsulate cross-cutting behaviour so pages and components stay declarativ...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_26)\n\n---\n\n[grammar] ~3-~3: Use correct spacing\nContext: ...o pages and components stay declarative.  ## Existing Hooks - `use-mobile.tsx`: Detec...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~5-~5: There might be a mistake here.\nContext: ...mponents stay declarative.  ## Existing Hooks - `use-mobile.tsx`: Detects viewport size for responsive ad...\n\n(QB_NEW_EN_OTHER)\n\n---\n\n[grammar] ~6-~6: There might be a mistake here.\nContext: ...iewport size for responsive adjustments. - `use-toast.ts`: Exposes the shadcn toaster API. - `use...\n\n(QB_NEW_EN)\n\n---\n\n[grammar] ~9-~9: Use correct spacing\nContext: ... automatically when completed or failed.  ## Guidelines - Group shared behaviour (API...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~11-~11: There might be a mistake here.\nContext: ...when completed or failed.  ## Guidelines - Group shared behaviour (API orchestratio...\n\n(QB_NEW_EN)\n\n---\n\n[grammar] ~12-~12: Consider adjusting word choice based on regional variation\nContext: ...r failed.  ## Guidelines - Group shared behaviour (API orchestration, feature flags, anal...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_26)\n\n---\n\n[grammar] ~12-~12: There might be a mistake here.\nContext: ... than repeating logic across components. - Prefix asynchronous hooks with `use` and...\n\n(QB_NEW_EN)\n\n---\n\n[grammar] ~14-~14: Use correct spacing\nContext: ...ate query keys/constants here for reuse.  Note new hooks in this file and describe...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.18.1)</summary>\n\n5-5: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n10-10: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/hooks/AGENTS.md around lines 1 to 16, the markdown is missing\nblank lines before the section headings (notably before \"## Existing Hooks\" and\n\"## Guidelines\" at lines 5 and 10); fix by inserting a single blank line\nimmediately above each of those heading lines so there is an empty line between\nthe preceding paragraph or content and the heading, then save the file.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437808","path":"client/src/hooks/AGENTS.md","line":16}]}},{"id":"PRRT_kwDOQC8mVc5eUI4D","isResolved":true,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5u0","databaseId":2438437812,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Harden network error handling and add a mutation key**\n\nAdd a timeout + abort, parse non‑JSON error bodies safely, and set a mutationKey for easier tooling/debugging.\n\n\n```diff\n async function postScan(input: CreateScanInput): Promise<CreateScanResponse> {\n-  const response = await fetch(\"/api/scan\", {\n+  const ac = new AbortController();\n+  const timeoutId = setTimeout(() => ac.abort(), 15_000);\n+  const response = await fetch(\"/api/scan\", {\n     method: \"POST\",\n     headers: {\n       \"Content-Type\": \"application/json\",\n     },\n-    body: JSON.stringify(input),\n-  });\n+    body: JSON.stringify(input),\n+    signal: ac.signal,\n+  }).finally(() => clearTimeout(timeoutId));\n \n-  if (!response.ok) {\n-    const data = (await response.json().catch(() => undefined)) as\n-      | ApiError\n-      | undefined;\n-    const message = data?.message ?? \"Unable to start scan.\";\n-    throw new Error(message);\n-  }\n+  const contentType = response.headers.get(\"content-type\") ?? \"\";\n+  if (!response.ok) {\n+    let message = \"Unable to start scan.\";\n+    if (contentType.includes(\"application/json\")) {\n+      const data = (await response.json().catch(() => undefined)) as ApiError | undefined;\n+      message = data?.message ?? message;\n+    } else {\n+      const text = await response.text().catch(() => \"\");\n+      if (text) message = text;\n+    }\n+    throw new Error(message);\n+  }\n \n   const payload = (await response.json()) as CreateScanResponse;\n   return payload;\n }\n \n export function useScanMutation(): UseMutationResult<\n   CreateScanResponse,\n   Error,\n   CreateScanInput\n > {\n-  return useMutation({\n-    mutationFn: postScan,\n-  });\n+  return useMutation({\n+    mutationKey: [\"scan\", \"start\"],\n+    mutationFn: postScan,\n+  });\n }\n```\n\n\nAlso applies to: 39-41\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n✅ Addressed in commit c22a7aa","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437812","path":"client/src/hooks/useScanMutation.ts","line":38}]}},{"id":"PRRT_kwDOQC8mVc5eUI4E","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5u1","databaseId":2438437813,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Guard against empty responses (e.g., 204) to avoid JSON parse errors.**\n\nIf the endpoint ever returns 204/empty body, `response.json()` throws.\n\n```diff\n-  const payload = (await response.json()) as ScanStatusResponse;\n-  return payload;\n+  if (response.status === 204) {\n+    return { scanId, status: \"pending\" } as ScanStatusResponse;\n+  }\n+  return (await response.json()) as ScanStatusResponse;\n```\n\nConfirm whether /api/scan/:id can return 204 while a job is enqueued.\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/hooks/useScanStatus.ts around lines 26 to 35, the code calls\nresponse.json() unconditionally which will throw on empty responses (e.g., 204).\nUpdate both the error and success paths to first check for an empty body or 204\nstatus (e.g., response.status === 204 or await response.text() === \"\" /\nContent-Length === \"0\"), and only call response.json() when there is a non-empty\nbody; when empty, return a sensible fallback (e.g., undefined or an object\nindicating no content) or throw a clear error message. Also confirm whether the\n/api/scan/:id endpoint can legitimately return 204 and handle that case\nexplicitly.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437813","path":"client/src/hooks/useScanStatus.ts","line":42}]}},{"id":"PRRT_kwDOQC8mVc5eUI4G","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5u5","databaseId":2438437817,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Minor: avoid non‑null assertion by guarding inside queryFn.**\n\nSafer even if `enabled` is toggled incorrectly.\n\n```diff\n-    queryFn: () => fetchScanStatus(scanId!),\n+    queryFn: () => {\n+      if (!scanId) throw new Error(\"scanId is required\");\n+      return fetchScanStatus(scanId);\n+    },\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n    queryKey: [\"scan-status\", scanId],\n    queryFn: () => {\n      if (!scanId) throw new Error(\"scanId is required\");\n      return fetchScanStatus(scanId);\n    },\n    enabled: Boolean(scanId) && (options?.enabled ?? true),\n    refetchInterval: (query) => {\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/hooks/useScanStatus.ts around lines 44 to 47, the queryFn uses a\nnon-null assertion (scanId!) which should be avoided; update queryFn to first\ncheck if scanId is present and, if not, throw or return a rejected Promise (e.g.\nthrow new Error(\"No scanId\")) so the function is type-safe without using \"!\" and\nstill behaves correctly if enabled is mis-toggled.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437817","path":"client/src/hooks/useScanStatus.ts","line":63}]}},{"id":"PRRT_kwDOQC8mVc5eUI4J","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5u8","databaseId":2438437820,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🔴 Critical_\n\n<details>\n<summary>🧩 Analysis chain</summary>\n\n**Verify print rendering of gradient text elements.**\n\nThe print media query applies `@apply text-black` to override `.priority-number` gradients, but the vendor-prefixed `-webkit-text-fill-color: transparent` from the base definition may not be fully overridden in print context, potentially rendering invisible or faint text.\n\n\n\nExplicitly reset the webkit properties in the print media query to ensure the text is visible when printed:\n\n```css\n@media print {\n  .priority-number {\n    background: none;\n    -webkit-background-clip: unset;\n    -webkit-text-fill-color: unset;\n    color: #000;\n  }\n\n  .priority-number--later {\n    background: none;\n    -webkit-background-clip: unset;\n    -webkit-text-fill-color: unset;\n    color: #000;\n  }\n}\n```\n\nTest print output by printing a page containing `.priority-number` and `.priority-number--later` elements to confirm they render legibly.\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Examine the CSS file around lines 376-378 and surrounding context\ncat client/src/index.css | sed -n '360,395p' | cat -n\n```\n\nLength of output: 419\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Search for `.priority-number` definitions and print media queries in the CSS\nrg -n 'priority-number|@media print' client/src/index.css | head -30\n```\n\nLength of output: 96\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Get the full context of `.priority-number` class definitions\nrg -n -B5 -A8 '\\.priority-number\\s*\\{' client/src/index.css\n```\n\nLength of output: 649\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Get full context of `.priority-number--later` definition\nrg -n -A8 '\\.priority-number--later\\s*\\{' client/src/index.css\n```\n\nLength of output: 276\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Check if there's a `.priority-number--later` in the print media query\nrg -n -B2 -A8 '@media print' client/src/index.css | grep -A20 'priority-number--later'\n```\n\nLength of output: 0\n\n---\n\n🏁 Script executed:\n\n```shell\n#!/bin/bash\n# Retrieve the entire @media print block\nrg -n -A50 '@media print \\{' client/src/index.css\n```\n\nLength of output: 678\n\n---\n\n\n\n</details>\n\n**Add missing `.priority-number--later` override to print media query and explicitly reset webkit properties.**\n\nThe print media query overrides `.priority-number` with `@apply text-black`, but this doesn't reset the vendor-prefixed `-webkit-text-fill-color: transparent` from the base definition (lines 203, 209), which can still apply in print context and render text invisible. Additionally, `.priority-number--later` lacks any print override entirely.\n\nUpdate lines 376–378 in the `@media print` block to explicitly reset webkit properties for both classes:\n\n```css\n@media print {\n  .priority-number {\n    background: none;\n    -webkit-background-clip: unset;\n    -webkit-text-fill-color: unset;\n    color: #000;\n  }\n\n  .priority-number--later {\n    background: none;\n    -webkit-background-clip: unset;\n    -webkit-text-fill-color: unset;\n    color: #000;\n  }\n}\n```\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/index.css around lines 376 to 378, the @media print rule currently\nonly applies @apply text-black to .priority-number which does not reset\nvendor-prefixed properties from the base styles (like -webkit-text-fill-color)\nand .priority-number--later has no print overrides; update the print block to\nexplicitly reset background, -webkit-background-clip, and\n-webkit-text-fill-color and set color to #000 for both .priority-number and\n.priority-number--later so printed text is visible.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437820","path":"client/src/index.css","line":378}]}},{"id":"PRRT_kwDOQC8mVc5eUI4N","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vB","databaseId":2438437825,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟡 Minor_\n\n**Fix markdownlint MD022: add blank lines after headings.**\n\nAdd blank lines after “## Files” and “## Guidelines”.\n\n```diff\n ## Files\n- - `mock-data.ts`: Temporary `ScanResult` demo payload using shared types. Keep sample data aligned with real API responses as they evolve.\n+ \n+ - `mock-data.ts`: Temporary `ScanResult` demo payload using shared types. Keep sample data aligned with real API responses as they evolve.\n  - `queryClient.ts`: Configures the TanStack Query client (default retry, cache timings). Adjust global behaviours here rather than per-hook unless absolutely necessary.\n  - `utils.ts`: Houses helper functions (`cn`, formatting utils, etc.). Centralise presentational helpers here to avoid duplication.\n\n ## Guidelines\n- - When real data replaces mocks, keep the mock file as a fixture (rename to `fixtures` if needed) so design reviews remain reproducible.\n+ \n+ - When real data replaces mocks, keep the mock file as a fixture (rename to `fixtures` if needed) so design reviews remain reproducible.\n```\n\n\nAlso applies to: 10-10\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/lib/AGENTS.md around lines 5 and 10, headings \"## Files\" (line 5)\nand \"## Guidelines\" (line 10) need a blank line immediately after each heading\nto satisfy markdownlint MD022; insert a single empty line after each of those\nheading lines so there is a blank line separating the heading from the following\ncontent.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437825","path":"client/src/lib/AGENTS.md","line":5}]}},{"id":"PRRT_kwDOQC8mVc5eUI4Q","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vG","databaseId":2438437830,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**US English consistency.**\n\nPrefer “behaviors” and “Centralize” to match US style used elsewhere.\n\n```diff\n- - `queryClient.ts`: Configures the TanStack Query client (default retry, cache timings). Adjust global behaviours here rather than per-hook unless absolutely necessary.\n+ - `queryClient.ts`: Configures the TanStack Query client (default retry, cache timings). Adjust global behaviors here rather than per-hook unless absolutely necessary.\n- - `utils.ts`: Houses helper functions (`cn`, formatting utils, etc.). Centralise presentational helpers here to avoid duplication.\n+ - `utils.ts`: Houses helper functions (`cn`, formatting utils, etc.). Centralize presentational helpers here to avoid duplication.\n- - Add new helper functions sparingly and document them with concise comments when behaviour might surprise another agent.\n+ - Add new helper functions sparingly and document them with concise comments when behavior might surprise another agent.\n```\nBased on learnings\n\n\nAlso applies to: 12-12\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~7-~7: Consider adjusting word choice based on regional variation\nContext: ...lt retry, cache timings). Adjust global behaviours here rather than per-hook unless absolu...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_26)\n\n---\n\n[grammar] ~7-~7: Use hyphens correctly\nContext: ...t global behaviours here rather than per-hook unless absolutely necessary. - `uti...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_29)\n\n---\n\n[grammar] ~7-~7: There might be a mistake here.\nContext: ...an per-hook unless absolutely necessary. - `utils.ts`: Houses helper functions (`cn`, formatt...\n\n(QB_NEW_EN)\n\n---\n\n[grammar] ~8-~8: Consider adjusting word choice based on regional variation\nContext: ...nctions (`cn`, formatting utils, etc.). Centralise presentational helpers here to avoid du...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_26)\n\n---\n\n[grammar] ~8-~8: Use correct spacing\nContext: ...ional helpers here to avoid duplication.  ## Guidelines - When real data replaces moc...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/lib/AGENTS.md around lines 7-8 (and also line 12), update British\nspellings to US English: change “behaviours” to “behaviors” and “Centralise” to\n“Centralize” (and any other occurrences of the British variants on the\nreferenced lines) so the document matches the US style used elsewhere.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437830","path":"client/src/lib/AGENTS.md","line":8}]}},{"id":"PRRT_kwDOQC8mVc5eUI4T","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vJ","databaseId":2438437833,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟡 Minor_\n\n**Fix markdownlint MD022: add blank lines after headings.**\n\nInsert a blank line after “## Current Pages” and “## Guidelines” to satisfy MD022.\n\n```diff\n ## Current Pages\n- - `Home.tsx`: Manages the prototype’s three-state flow (`intake`, `scanning`, `results`). Treat it as the orchestrator for future multi-step experiences.\n+ \n+ - `Home.tsx`: Manages the prototype’s three-state flow (`intake`, `scanning`, `results`). Treat it as the orchestrator for future multi-step experiences.\n  - `not-found.tsx`: Lightweight 404 handling. Expand it with helpful navigation once additional routes exist.\n\n ## Guidelines\n- - Keep pages lean—most layout and presentation logic should live in components. Pages should mainly stitch together query hooks, loading states, and navigation.\n+ \n+ - Keep pages lean—most layout and presentation logic should live in components. Pages should mainly stitch together query hooks, loading states, and navigation.\n```\n\n\nAlso applies to: 9-9\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~5-~5: There might be a mistake here.\nContext: ...n of lower-level UI blocks.  ## Current Pages - `Home.tsx`: Manages the prototype’s three-state flo...\n\n(QB_NEW_EN_OTHER)\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.18.1)</summary>\n\n5-5: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/pages/AGENTS.md around lines 5 and 9, the headings \"## Current\nPages\" (line 5) and \"## Guidelines\" (line 9) are missing a blank line after them\nwhich violates markdownlint MD022; add a single empty line immediately following\neach of those heading lines so there is a blank line between the heading and the\nfollowing content.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437833","path":"client/src/pages/AGENTS.md","line":5}]}},{"id":"PRRT_kwDOQC8mVc5eUI4V","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vM","databaseId":2438437836,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**US English consistency.**\n\nConsider “Centralize” over “Centralise” to match US style used elsewhere.\n\n```diff\n- - Centralise route definitions in `App.tsx`; update both the router and this guide when adding routes.\n+ - Centralize route definitions in `App.tsx`; update both the router and this guide when adding routes.\n```\nBased on learnings\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n- Centralize route definitions in `App.tsx`; update both the router and this guide when adding routes.\n- Handle side effects (analytics, async orchestration) via hooks under `client/src/hooks` so they can be shared across pages.\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~11-~11: Consider adjusting word choice based on regional variation\nContext: ...ooks, loading states, and navigation. - Centralise route definitions in `App.tsx`; update ...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_26)\n\n---\n\n[grammar] ~11-~11: There might be a mistake here.\nContext: ...outer and this guide when adding routes. - Handle side effects (analytics, async or...\n\n(QB_NEW_EN)\n\n---\n\n[grammar] ~12-~12: Use correct spacing\nContext: ...oks` so they can be shared across pages.  Document any new page responsibilities h...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/pages/AGENTS.md around lines 11 to 12, the word “Centralise” uses\nBritish spelling while the project uses US English; change “Centralise route\ndefinitions in `App.tsx`” to “Centralize route definitions in `App.tsx`” and\nscan the file for any other British spellings (e.g., centralise, organise,\ninitialise) and replace them with US variants to keep consistency across the\ndocs.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437836","path":"client/src/pages/AGENTS.md","line":12}]}},{"id":"PRRT_kwDOQC8mVc5eUI4d","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vU","databaseId":2438437844,"author":{"login":"coderabbitai"},"body":"_🛠️ Refactor suggestion_ | _🟠 Major_\n\n**Don’t start polling until a scanId exists**\n\nGuard the query with both the view and a truthy scanId to avoid unnecessary requests.\n\n\n```diff\n-  const scanStatusQuery = useScanStatus(scanId ?? undefined, {\n-    enabled: view === \"scanning\",\n-  });\n+  const scanStatusQuery = useScanStatus(scanId ?? undefined, {\n+    enabled: view === \"scanning\" && Boolean(scanId),\n+  });\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const scanStatusQuery = useScanStatus(scanId ?? undefined, {\n    enabled: view === \"scanning\" && Boolean(scanId),\n  });\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/pages/Home.tsx around lines 18 to 21, the query is only guarded by\nview but still runs when scanId is falsy; change the query's enabled option to\nrequire both view === \"scanning\" and a truthy scanId (e.g. enabled: view ===\n\"scanning\" && !!scanId) so polling does not start until scanId exists, and\nremove the unnecessary scanId ?? undefined usage if present.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437844","path":"client/src/pages/Home.tsx","line":26}]}},{"id":"PRRT_kwDOQC8mVc5eUI4h","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vY","databaseId":2438437848,"author":{"login":"coderabbitai"},"body":"_🛠️ Refactor suggestion_ | _🟠 Major_\n\n**Type the intake payload instead of `any`**\n\nUse the shared schema type to catch mistakes at compile time.\n\n\n```diff\n-import type { ScanResult } from \"@shared/schema\";\n+import type { ScanResult, CreateScanInput } from \"@shared/schema\";\n@@\n-  const handleFormSubmit = (data: any) => {\n+  const handleFormSubmit = (data: CreateScanInput & { consent: boolean }) => {\n```\n\n\nAlso applies to: 8-8\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/pages/Home.tsx around lines 26-27 (and also at line 8), the form\nhandler currently types its parameter as any; replace that with the shared\nintake payload type from the common/schema (import the correct type name from\nthe shared schema module) and use that type for the handleFormSubmit parameter\nso the destructured { consent, ...payload } is properly typed and compile-time\nchecked; update the import at the top (line ~8) to bring in the shared\nschema/type and adjust the function signature to use it.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437848","path":"client/src/pages/Home.tsx","line":32}]}},{"id":"PRRT_kwDOQC8mVc5eUI4i","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5va","databaseId":2438437850,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Clear scanId on failure to avoid stale state**\n\nWhen a scan fails, also reset scanId so a new attempt starts clean.\n\n\n```diff\n     } else if (scanStatusQuery.data.status === \"failed\") {\n       toast({\n         variant: \"destructive\",\n         description:\n           scanStatusQuery.data.error ??\n           \"The scan failed unexpectedly. Please try again.\",\n       });\n-      setView(\"intake\");\n+      setView(\"intake\");\n+      setScanId(null);\n     }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n      toast({\n        variant: \"destructive\",\n        description:\n          scanStatusQuery.data.error ??\n          \"The scan failed unexpectedly. Please try again.\",\n      });\n      setView(\"intake\");\n      setScanId(null);\n    }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/pages/Home.tsx around lines 71 to 78, the error handling after a\nfailed scan currently shows a toast and sets view to \"intake\" but does not clear\nthe scanId, which can leave stale state; update the failure branch to also reset\nthe scanId (call the state setter, e.g., setScanId(null) or setScanId(\"\")\ndepending on how it's typed) immediately when handling the error so a subsequent\nscan attempt starts with a clean state.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437850","path":"client/src/pages/Home.tsx","line":83}]}},{"id":"PRRT_kwDOQC8mVc5eUI4n","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vg","databaseId":2438437856,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Fix markdown heading spacing (MD022) and add contracts pointer**\n\nAdd blank lines after headings. Also add a short pointer to request/response contracts in shared docs to keep root concise. Based on learnings\n\n\n```diff\n ## Architecture\n+ \n - `index.ts` instantiates Express, registers middleware, and wires request logging for `/api` routes. It also conditionally mounts Vite middleware (`setupVite`) in development or static assets (`serveStatic`) in production.\n ...\n ## Development Workflow\n+ \n - Run the whole stack via `npm run dev` (root). The server boots with `NODE_ENV=development`, so Vite middleware injects HMR.\n ...\n ## Adding APIs\n+ \n - Define request/response contracts in `shared/` using Drizzle + Zod; import the types here for validation.\n ...\n ## Deployment Notes\n+ \n - The server must honour the `PORT` environment variable (already enforced in `index.ts`). Do not hardcode alternative ports. Replit environments automatically enable `reusePort`; local runs skip it to avoid Darwin socket errors. The local script defaults to `5173` because macOS Control Center binds port 5000.\n ...\n+## API Contracts\n+\n+See `shared/AGENTS.md` for the Scan create/status/result schemas and keep this in sync when routes change.\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n## Architecture\n\n- `index.ts` instantiates Express, registers middleware, and wires request logging for `/api` routes. It also conditionally mounts Vite middleware (`setupVite`) in development or static assets (`serveStatic`) in production.\n- `routes.ts` is the central place to register REST endpoints. Always prefix routes with `/api`, and return JSON responses with explicit status codes.\n- `storage.ts` exposes the `IStorage` interface and an in-memory `MemStorage` implementation. It currently handles only user CRUD; expand it before adding new persistence needs.\n- `vite.ts` bridges Express and Vite. Update this carefully—misconfigurations will break both dev HMR and static serving.\n\n## Development Workflow\n\n- Run the whole stack via `npm run dev` (root). The server boots with `NODE_ENV=development`, so Vite middleware injects HMR.\n- When adding routes, restart the dev process if you touch non-hot-reloaded files (e.g., `vite.ts`).\n- Logging truncates long JSON payloads to 80 characters; adjust the limit in `index.ts` only if necessary.\n\n## Adding APIs\n\n- Define request/response contracts in `shared/` using Drizzle + Zod; import the types here for validation.\n- Register new routes inside `registerRoutes`. Compose handlers as small functions and keep side effects isolated in services or storage helpers.\n- For asynchronous handlers, wrap logic in `try/catch` and pass errors to `next()` so the global error handler can respond uniformly.\n- If persistent storage graduates beyond memory, create a new class implementing `IStorage` and wire it into the exported `storage`.\n\n## Deployment Notes\n\n- The server must honour the `PORT` environment variable (already enforced in `index.ts`). Do not hardcode alternative ports. Replit environments automatically enable `reusePort`; local runs skip it to avoid Darwin socket errors. The local script defaults to `5173` because macOS Control Center binds port 5000.\n- Production builds live in `server/public/` after `npm run build`. Ensure the client build succeeds before deploying.\n\n## API Contracts\n\nSee `shared/AGENTS.md` for the Scan create/status/result schemas and keep this in sync when routes change.\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~5-~5: Use correct spacing\nContext: ...he Vite-powered client.  ## Architecture - `index.ts` instantiates Express, registers middlewa...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~7-~7: Use correct spacing\nContext: ...rveStatic`) in production. - `routes.ts` is the central place to register REST en...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~8-~8: Use correct spacing\nContext: ...th explicit status codes. - `storage.ts` exposes the `IStorage` interface and an ...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~9-~9: Use correct spacing\nContext: ...dding new persistence needs. - `vite.ts` bridges Express and Vite. Update this ca...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~9-~9: Use correct spacing\nContext: ...l break both dev HMR and static serving.  ## Development Workflow - Run the whole sta...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~14-~14: Use correct spacing\nContext: ...e limit in `index.ts` only if necessary.  ## Adding APIs - Define request/response co...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~20-~20: Use correct spacing\nContext: ...and wire it into the exported `storage`.  ## Deployment Notes - The server must honou...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n---\n\n[grammar] ~22-~22: There might be a mistake here.\nContext: ...exported `storage`.  ## Deployment Notes - The server must honour the `PORT` enviro...\n\n(QB_NEW_EN)\n\n---\n\n[grammar] ~23-~23: Consider adjusting word choice based on regional variation\nContext: ...  ## Deployment Notes - The server must honour the `PORT` environment variable (alread...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_26)\n\n---\n\n[grammar] ~24-~24: Use correct spacing\nContext: ... client build succeeds before deploying.  Document any non-trivial backend changes...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.18.1)</summary>\n\n5-5: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n10-10: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n15-15: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n20-20: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n---\n\n25-25: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/AGENTS.md around lines 5 to 25, add a blank line immediately after\neach markdown heading (e.g., \"## Architecture\", \"## Development Workflow\", \"##\nAdding APIs\", \"## Deployment Notes\") to satisfy MD022, and under the \"Adding\nAPIs\" section add a concise one-line pointer to the shared contract docs (e.g.,\n\"See shared/ for request/response contracts defined with Drizzle + Zod\") so\ncallers know where to find the request/response contract definitions; ensure\nspacing and punctuation match existing style.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437856","path":"server/AGENTS.md","line":25}]}},{"id":"PRRT_kwDOQC8mVc5eUI4q","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vl","databaseId":2438437861,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Unbounded in-memory retention for jobs/queue; add eviction/TTL to cap memory.**\n\n`jobs` Map and `queue` grow without bounds. For long-running servers, this risks memory leaks.\n\n- Add a TTL or LRU cap (e.g., keep last N completed/failed jobs; evict older on new enqueue).\n- Optionally, persist artifacts externally and drop from memory after completion to reduce heap usage. <!-- review_comment_end -->\n\n\n\nAlso applies to: 42-44\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437861","path":"server/queue/scan-queue.ts","line":32}]}},{"id":"PRRT_kwDOQC8mVc5eUI4s","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vn","databaseId":2438437863,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🔴 Critical_\n\n**Avoid fire-and-forget persistence in enqueue; handle errors to prevent unhandled rejections and races.**\n\n`void storage.createScan(...)` can reject and isn’t awaited/caught. This risks unhandled rejections and a race where status lookups don’t see the record yet.\n\nApply minimal safe handling:\n\n```diff\n-    void storage.createScan({\n+    storage.createScan({\n       id,\n       businessUrl: request.businessUrl,\n       businessName: request.businessName,\n       zip: request.zip,\n       phone: request.phone,\n       status: \"pending\",\n       result: null,\n       createdAt: job.createdAt,\n-    });\n+    }).catch((err) => {\n+      // TODO: replace with structured logger\n+      console.error(\"createScan failed\", { id, err });\n+    });\n```\nAlternatively, make `enqueue` async and `await` this call if the API contract allows it. <!-- review_comment_end -->\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  enqueue(request: ScannerRequest): string {\n    const id = randomUUID();\n    const job: ScanJobRecord = {\n      id,\n      status: \"pending\",\n      request,\n      createdAt: new Date(),\n    };\n\n    this.jobs.set(id, job);\n    this.queue.push(id);\n    storage.createScan({\n      id,\n      businessUrl: request.businessUrl,\n      businessName: request.businessName,\n      zip: request.zip,\n      phone: request.phone,\n      status: \"pending\",\n      result: null,\n      createdAt: job.createdAt,\n    }).catch((err) => {\n      // TODO: replace with structured logger\n      console.error(\"createScan failed\", { id, err });\n    });\n    this.processNext();\n    return id;\n  }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/queue/scan-queue.ts around lines 33 to 56, the enqueue method is\nfire-and-forget calling storage.createScan which can reject and cause unhandled\nrejections and races; change the implementation to either (preferable) make\nenqueue async, await storage.createScan and propagate/handle errors before\npushing the job and calling processNext, or (if API must remain sync) keep it\nsync but attach a .catch to storage.createScan to log/handle errors and ensure\nthe created DB record is present before returning or before processNext (e.g.,\nawait completion of createScan before this.queue.push and this.processNext);\nensure any rejection is caught and surfaced to caller or logged and do not call\nprocessNext until persistence succeeds.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437863","path":"server/queue/scan-queue.ts","line":56}]}},{"id":"PRRT_kwDOQC8mVc5eUI4w","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vt","databaseId":2438437869,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Do not fire-and-forget state transition to “running”; await and persist startedAt.**\n\nThe transition to running is not awaited and startedAt isn’t persisted, causing possible drift between memory and storage.\n\n```diff\n-    void storage.updateScan(job.id, { status: \"running\" });\n+    await storage.updateScan(job.id, {\n+      status: \"running\",\n+      // persist the actual start time for auditability\n+      startedAt: job.startedAt,\n+    }).catch((err) => {\n+      console.error(\"updateScan->running failed\", { id: job.id, err });\n+    });\n```\nIf `startedAt` isn’t supported by storage, add it to the schema/update DTO. <!-- review_comment_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/queue/scan-queue.ts around lines 95 to 99, the code currently sets\njob.startedAt and sets status to \"running\" but fire-and-forgets\nstorage.updateScan, so the in-memory state can diverge from persisted state;\nchange the call to await storage.updateScan(job.id, { status: \"running\",\nstartedAt: job.startedAt }) so the transition is persisted before continuing,\nand if the storage update DTO/schema doesn't include startedAt, extend the\nupdate DTO/schema and any DB mapper to accept and persist startedAt.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437869","path":"server/queue/scan-queue.ts","line":99}]}},{"id":"PRRT_kwDOQC8mVc5eUI4z","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5vz","databaseId":2438437875,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Persist failure context (sanitized) to storage; avoid leaking raw error details to clients.**\n\nYou set `job.error` but don’t persist any error summary; storage shows only status/result. Also, exposing `error.message` via API may leak internals.\n\n```diff\n-      job.error =\n-        error instanceof Error\n-          ? error.message\n-          : \"Scan failed due to unexpected error.\";\n+      const rawMessage = error instanceof Error ? error.message : String(error);\n+      // sanitize message to avoid leaking internals\n+      job.error = \"Scan failed. Please try again later.\";\n       job.status = \"failed\";\n       const completedAt = new Date();\n       job.completedAt = completedAt;\n       await storage.updateScan(job.id, {\n         status: \"failed\",\n         result: null,\n         completedAt,\n+        // if your storage supports it, persist a brief error summary\n+        error: rawMessage.slice(0, 500),\n       });\n```\nConfirm storage schema supports an `error` field; if not, add one or persist a separate audit log. <!-- review_comment_end -->\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437875","path":"server/queue/scan-queue.ts","line":125}]}},{"id":"PRRT_kwDOQC8mVc5eUI41","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5v4","databaseId":2438437880,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🔴 Critical_\n\n**Block SSRF vectors: validate `businessUrl` protocol/host before enqueue.**\n\nCurrent schema allows any string; a crafted URL (file:, data:, localhost, IPs) could pivot scans into internal networks.\n\nApply minimal server-side validation before enqueue:\n\n```diff\n   app.post(\"/api/scan\", async (req: Request, res: Response) => {\n     const parseResult = createScanSchema.safeParse(req.body);\n     if (!parseResult.success) {\n       return res.status(400).json({\n         message: \"Invalid scan request\",\n         issues: parseResult.error.flatten(),\n       });\n     }\n\n-    const { businessName, businessUrl, zip, phone } = parseResult.data;\n+    const { businessName, businessUrl, zip, phone } = parseResult.data;\n+    // SSRF hardening: only allow http/https and disallow localhost/direct IPs.\n+    let urlObj: URL;\n+    try {\n+      urlObj = new URL(businessUrl);\n+    } catch {\n+      return res.status(400).json({ message: \"businessUrl must be a valid URL\" });\n+    }\n+    const protocolOk = urlObj.protocol === \"http:\" || urlObj.protocol === \"https:\";\n+    const host = urlObj.hostname.toLowerCase();\n+    const isLocalhost = host === \"localhost\" || host.endsWith(\".localhost\");\n+    const isDirectIp = require(\"node:net\").isIP(host) !== 0;\n+    if (!protocolOk || isLocalhost || isDirectIp) {\n+      return res.status(400).json({ message: \"businessUrl must be a public http(s) hostname\" });\n+    }\n+    // Optional: restrict non-standard ports\n+    const port = urlObj.port ? Number(urlObj.port) : (urlObj.protocol === \"https:\" ? 443 : 80);\n+    if (![80, 443].includes(port)) {\n+      return res.status(400).json({ message: \"Only ports 80/443 are allowed\" });\n+    }\n\n     try {\n       const scanId = scanQueue.enqueue({\n         businessName,\n         businessUrl,\n         zip,\n         phone,\n       });\n\n-      return res.status(202).json({\n+      return res\n+        .status(202)\n+        .location(`/api/scan/${scanId}`)\n+        .set(\"Retry-After\", \"2\")\n+        .json({\n           scanId,\n           status: \"pending\",\n-      });\n+        });\n```\n\nNote: For stronger guarantees, resolve DNS and block private/reserved CIDRs before crawling.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/routes.ts around lines 14 to 44, validate businessUrl before enqueue\nto block SSRF: parse the value with the URL constructor and ensure it uses only\nhttp or https, is an absolute URL, and its hostname is not localhost or an IP in\nloopback/link-local/private/reserved ranges (127.0.0.0/8, ::1, 10.0.0.0/8,\n172.16.0.0/12, 192.168.0.0/16, 169.254.0.0/16, etc.); if validation fails return\n400 with an error message instead of enqueuing; implement IP detection by\nchecking if hostname is an IP and testing against those CIDRs (or use an IP/CIDR\nhelper library) and reject non-http(s) schemes like file:, data:, ftp: as well.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437880","path":"server/routes.ts","line":53}]}},{"id":"PRRT_kwDOQC8mVc5eUI45","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5v8","databaseId":2438437884,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Include `Location` (and optional `Retry-After`) in 202 responses.**\n\nHelps clients discover the polling endpoint and cadence.\n\n(See diff in prior comment.)\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/routes.ts around lines 33–36, the 202 response currently returns JSON\nonly; add a Location header pointing to the polling endpoint for the created\nscan (e.g. /scans/:scanId or a status endpoint like /scans/:scanId/status) and\noptionally include a Retry-After header with a suggested poll interval\n(seconds). Build the Location value using the request context (path or full URL\nvia req.protocol + '://' + req.get('host') + '/scans/' + scanId) and set headers\non the response before sending the JSON body; set Retry-After to a sensible\ndefault (e.g. 30) if desired.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437884","path":"server/routes.ts","line":45}]}},{"id":"PRRT_kwDOQC8mVc5eUI48","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5wA","databaseId":2438437888,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Run Lighthouse and crawl in parallel to cut scan time.**\n\nSchema analysis depends on crawl pages, but Lighthouse is independent. Parallelizing reduces end‑to‑end latency.\n\n```diff\n-  const crawl = await crawlWebsite({ baseUrl: normalizedUrl.toString() });\n-  const lighthouse = await runLighthouseAudit({\n-    baseUrl: normalizedUrl.toString(),\n-  });\n+  const [crawl, lighthouse] = await Promise.all([\n+    crawlWebsite({ baseUrl: normalizedUrl.toString() }),\n+    runLighthouseAudit({ baseUrl: normalizedUrl.toString() }),\n+  ]);\n```\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/scanner.ts around lines 34 to 43, the code currently\nruns crawlWebsite and runLighthouseAudit sequentially which increases total scan\ntime; change it to start both operations in parallel (e.g. call\ncrawlWebsite(...) and runLighthouseAudit(...) without awaiting, store the\nreturned promises, then await Promise.all or await each promise after both\nstarted), then pass the resolved crawl.pages into analyzeSiteSchema; ensure\nnormalizedUrl is computed once and used for both calls and add minimal error\nhandling around each promise resolution.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437888","path":"server/services/scanner/scanner.ts","line":49}]}},{"id":"PRRT_kwDOQC8mVc5eUI4-","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5wC","databaseId":2438437890,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟡 Minor_\n\n**Evidence formatting: append “%” for percentage values.**\n\nPerformance score renders as a bare number (e.g., “85”) instead of “85%”.\n\nApply:\n\n```diff\n-  const formatted =\n-    unit === \"%\"\n-      ? `${value}`\n+  const formatted =\n+    unit === \"%\"\n+      ? `${value}%`\n       : unit === \"ms\"\n         ? `${Math.round(value)} ms`\n         : `${value}`;\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const formatted =\n    unit === \"%\"\n      ? `${value}%`\n      : unit === \"ms\"\n        ? `${Math.round(value)} ms`\n        : `${value}`;\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/scanner.ts around lines 164 to 169, the formatted\nstring for percentage values currently returns the raw number (e.g., \"85\");\nupdate the percent branch to append a \"%\" (e.g., `${value}%`) while leaving the\n\"ms\" branch (which rounds and appends \" ms\") and the default branch unchanged so\nperformance scores render with a trailing percent sign.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437890","path":"server/services/scanner/scanner.ts","line":190}]}},{"id":"PRRT_kwDOQC8mVc5eUI5F","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5wJ","databaseId":2438437897,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Handle scheme‑relative URLs in resolveAgainstOrigin**\n\nPaths starting with “//” (e.g., CDN links) are absolute and should not be joined to the business origin. Current logic treats them as relative. Fix below.\n\n\n```diff\n export function resolveAgainstOrigin(path: string, origin: string): string {\n   if (/^https?:\\/\\//i.test(path)) {\n     return path;\n   }\n \n+  // Scheme-relative URL (e.g., //cdn.example.com/asset.js)\n+  if (path.startsWith(\"//\")) {\n+    const base = new URL(origin);\n+    return `${base.protocol}${path}`;\n+  }\n+\n   const normalizedPath = path.startsWith(\"/\") ? path : `/${path}`;\n   return new URL(normalizedPath, origin).toString();\n }\n```\n\n\nWant unit tests for both helpers (valid/invalid, no‑protocol, scheme‑relative, empty path)?\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\nexport function resolveAgainstOrigin(path: string, origin: string): string {\n  if (/^https?:\\/\\//i.test(path)) {\n    return path;\n  }\n\n  // Scheme-relative URL (e.g., //cdn.example.com/asset.js)\n  if (path.startsWith(\"//\")) {\n    const base = new URL(origin);\n    return `${base.protocol}${path}`;\n  }\n\n  const normalizedPath = path.startsWith(\"/\") ? path : `/${path}`;\n  return new URL(normalizedPath, origin).toString();\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/url-utils.ts around lines 28–35, the resolver\ncurrently only checks for explicit http(s) schemes and treats scheme‑relative\nURLs (starting with \"//\") as relative; update the function to detect\nscheme‑relative inputs (e.g. /^\\/\\/.*/), and return them using the origin's\nprotocol (for example, construct new URL(origin) to get protocol and return\n`${protocol}${path}`) instead of joining to the business origin; also add unit\ntests for both helpers covering valid/invalid inputs, no‑protocol inputs,\nscheme‑relative URLs, and empty path cases.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437897","path":"server/services/scanner/url-utils.ts","line":null}]}},{"id":"PRRT_kwDOQC8mVc5eUI5M","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5wS","databaseId":2438437906,"author":{"login":"coderabbitai"},"body":"_🛠️ Refactor suggestion_ | _🟠 Major_\n\n**Auto-stamp completedAt when status transitions to “completed”.**\n\nPrevents callers from forgetting to set it; keeps records consistent.\n\n```diff\n   const merged: Scan = {\n     ...existing,\n     ...updates,\n   };\n\n   if (updates.status && !scanStatusEnumValues.includes(updates.status)) {\n     throw new Error(`Invalid scan status: ${updates.status}`);\n   }\n+  // Auto-set completedAt when moving to completed.\n+  if (existing.status !== \"completed\" && updates.status === \"completed\") {\n+    if (merged.completedAt == null) {\n+      merged.completedAt = new Date();\n+    }\n+  }\n\n   if (updates.createdAt && !(updates.createdAt instanceof Date)) {\n     merged.createdAt = new Date(updates.createdAt);\n   }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  async updateScan(\n    id: string,\n    updates: Partial<Omit<Scan, \"id\">>,\n  ): Promise<Scan | undefined> {\n    const existing = this.scans.get(id);\n    if (!existing) {\n      return undefined;\n    }\n\n    const merged: Scan = {\n      ...existing,\n      ...updates,\n    };\n\n    if (updates.status && !scanStatusEnumValues.includes(updates.status)) {\n      throw new Error(`Invalid scan status: ${updates.status}`);\n    }\n\n    // Auto-set completedAt when moving to completed.\n    if (existing.status !== \"completed\" && updates.status === \"completed\") {\n      if (merged.completedAt == null) {\n        merged.completedAt = new Date();\n      }\n    }\n\n    if (updates.createdAt && !(updates.createdAt instanceof Date)) {\n      merged.createdAt = new Date(updates.createdAt);\n    }\n\n    if (updates.completedAt !== undefined && updates.completedAt !== null) {\n      merged.completedAt =\n        updates.completedAt instanceof Date\n          ? updates.completedAt\n          : new Date(updates.completedAt);\n    } else if (updates.completedAt === null) {\n      merged.completedAt = null;\n    }\n\n    this.scans.set(id, merged);\n    return merged;\n  }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/storage.ts around lines 84 to 117, implement auto-stamping of\ncompletedAt when a scan's status transitions to \"completed\": after validating\nstatus and building merged, detect if updates.status === \"completed\" and\nexisting.status !== \"completed\" and if updates.completedAt is undefined (not\nexplicitly provided), set merged.completedAt = new Date(); otherwise respect\nexplicit updates.completedAt (including null) and preserve existing.completedAt\nwhen no change; then persist merged to this.scans as currently done.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437906","path":"server/storage.ts","line":117}]}},{"id":"PRRT_kwDOQC8mVc5eUI5Q","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5wY","databaseId":2438437912,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Optional: return scans sorted by createdAt desc for stable UIs.**\n\nImproves predictability for dashboards.\n\n```diff\n-  async listScans(): Promise<Scan[]> {\n-    return Array.from(this.scans.values());\n-  }\n+  async listScans(): Promise<Scan[]> {\n+    return Array.from(this.scans.values()).sort(\n+      (a, b) => (b.createdAt?.getTime?.() ?? 0) - (a.createdAt?.getTime?.() ?? 0),\n+    );\n+  }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  async listScans(): Promise<Scan[]> {\n    return Array.from(this.scans.values()).sort(\n      (a, b) => (b.createdAt?.getTime?.() ?? 0) - (a.createdAt?.getTime?.() ?? 0),\n    );\n  }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/storage.ts around lines 123 to 125, listScans currently returns scans\nin insertion order; change it to return scans sorted by createdAt in descending\norder (newest first) so UIs are stable and predictable — convert\nthis.scans.values() to an array, sort the array by each scan's createdAt\ntimestamp in descending order (use numeric timestamp comparison or Date\nconversion to handle Date/string types), and return the sorted array; ensure you\nhandle missing/invalid createdAt by treating them as older than valid\ntimestamps.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437912","path":"server/storage.ts","line":125}]}},{"id":"PRRT_kwDOQC8mVc5eUI5V","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5wf","databaseId":2438437919,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟡 Minor_\n\n**Fix markdownlint MD022: add blank lines after headings.**\n\nAdd a blank line after each “## …” heading.\n\n```diff\n ## Current Contents\n- - `schema.ts` defines the Drizzle ORM `users` table and derives `InsertUser`/`User` types with Zod (`drizzle-zod`). It is the single source of truth for user-related contracts.\n+ \n+ - `schema.ts` defines the Drizzle ORM `users` table and derives `InsertUser`/`User` types with Zod (`drizzle-zod`). It is the single source of truth for user-related contracts.\n\n ## Authoring Rules\n- - Define every persistent entity in Drizzle first, then export inferred select/insert types alongside validation schemas.\n+ \n+ - Define every persistent entity in Drizzle first, then export inferred select/insert types alongside validation schemas.\n\n ## Coordination\n- - Any change here requires coordinated updates:\n+ \n+ - Any change here requires coordinated updates:\n```\n\n\nAlso applies to: 8-8, 13-13\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~5-~5: Use correct spacing\nContext: ... client and server.  ## Current Contents - `schema.ts` defines the Drizzle ORM `users` table an...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n<details>\n<summary>🪛 markdownlint-cli2 (0.18.1)</summary>\n\n5-5: Headings should be surrounded by blank lines\nExpected: 1; Actual: 0; Below\n\n(MD022, blanks-around-headings)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn shared/AGENTS.md around line 5 (also apply same change at lines 8 and 13),\nthe \"## Current Contents\" heading is immediately followed by text which violates\nmarkdownlint MD022; add a single blank line after each \"## ...\" heading so there\nis an empty line between the heading and the following content to satisfy MD022.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437919","path":"shared/AGENTS.md","line":5}]}},{"id":"PRRT_kwDOQC8mVc5eUI5Y","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5wh","databaseId":2438437921,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Prefer native `uuid` columns over `varchar` for identifiers.**\n\nUsing `uuid` with `default sql\\`gen_random_uuid()\\`` (or `uuid_generate_v4()` if available) preserves type safety and index efficiency; `varchar` loses constraints and increases storage.\n\nBased on learnings\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 LanguageTool</summary>\n\n[grammar] ~11-~11: Use correct spacing\nContext: ...alidate forms before hitting the server.  ## Coordination - Any change here requires ...\n\n(QB_NEW_EN_OTHER_ERROR_IDS_5)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn shared/AGENTS.md around lines 10-11, the guidance currently prefers varchar\ncolumns with SQL defaults for UUIDs; update it to recommend using native uuid\ncolumn types with a database-side default like sql`gen_random_uuid()` or\n`uuid_generate_v4()` where available, noting this preserves type safety, index\nefficiency, and storage; replace the varchar suggestion and show the preferred\ndefault expression so schema examples and migration notes use uuid columns\ninstead of varchar for identifier fields.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437921","path":"shared/AGENTS.md","line":11}]}},{"id":"PRRT_kwDOQC8mVc5eUI5a","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5wl","databaseId":2438437925,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Constrain bucket scores so they can’t exceed their max.**\n\nPrevents impossible states leaking into the API contract.\n\n```diff\n-const scoreBucketSchema = z.object({\n-  score: z.number().min(0),\n-  max: z.number().positive(),\n-  description: z.string(),\n-});\n+const scoreBucketSchema = z\n+  .object({\n+    score: z.number().min(0),\n+    max: z.number().positive(),\n+    description: z.string(),\n+  })\n+  .refine((v) => v.score <= v.max, {\n+    path: [\"score\"],\n+    message: \"score cannot exceed max\",\n+  });\n```\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn shared/schema.ts around lines 38 to 43 the scoreBucketSchema allows score\nvalues greater than max which can produce invalid states; update the schema to\nenforce score <= max by adding a refinement (or zod .superRefine) that checks\nscore is less than or equal to max and returns a clear validation error when\nviolated so the API contract never permits a score greater than its max.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437925","path":"shared/schema.ts","line":43}]}},{"id":"PRRT_kwDOQC8mVc5eUI5c","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV5wn","databaseId":2438437927,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Optional: validate URLs at the edge (client/server payload).**\n\nIf you expect raw user input, basic URL validation avoids junk; the server still normalizes.\n\n```diff\n-export const createScanSchema = z.object({\n-  businessUrl: z.string().trim().min(1),\n+export const createScanSchema = z.object({\n+  businessUrl: z.string().trim().min(1),\n   businessName: z.string().trim().min(1),\n   zip: z.string().trim().min(3).max(15),\n   phone: z.string().trim().min(7).max(25).optional(),\n });\n```\n\nIf you want stricter validation, I can add a `.refine()` that accepts schemeless inputs and mirrors normalizeBusinessUrl. Based on learnings.\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn shared/schema.ts around lines 92 to 96, the businessUrl field currently only\ntrims and enforces length; add URL validation to reject junk inputs and accept\nschemeless URLs by using a .refine() (or .transform() + .refine()) that mirrors\nnormalizeBusinessUrl behavior: normalize the input (add missing scheme),\nparse/validate with URL or a safe regex, and return the normalized value on\nsuccess, otherwise fail validation with a clear message; keep phone/name/zip\nunchanged.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438437927","path":"shared/schema.ts","line":96}]}},{"id":"PRRT_kwDOQC8mVc5eUJON","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6Mf","databaseId":2438439711,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Parse ranges with en/em dashes too**\n\nSupport “12–15” or “12—15” inputs.\n\n```diff\n-    const match = potentialGain.match(/^\\+?\\d+(?:-\\d+)?/);\n+    const match = potentialGain.match(/^\\+?\\d+(?:[-–—]\\d+)?/);\n```\nAnd similarly:\n```diff\n-    const match = potentialGain.match(/^\\+?\\d+(?:-\\d+)?\\s*(.*)$/);\n+    const match = potentialGain.match(/^\\+?\\d+(?:[-–—]\\d+)?\\s*(.*)$/);\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const gainValue = useMemo(() => {\n    if (!potentialGain) return null;\n    const match = potentialGain.match(/^\\+?\\d+(?:[-–—]\\d+)?/);\n    return match ? match[0] : potentialGain;\n  }, [potentialGain]);\n\n  const gainSuffix = useMemo(() => {\n    if (!potentialGain) return \"points\";\n    const match = potentialGain.match(/^\\+?\\d+(?:[-–—]\\d+)?\\s*(.*)$/);\n    return match && match[1] ? match[1] : \"points\";\n  }, [potentialGain]);\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/ReportFixCard.tsx around lines 66 to 76, the regexes\nonly accept ASCII hyphens for ranges (e.g., \"12-15\") but should also accept\nen-dash and em-dash; update the two match patterns to allow - \\u2013 and \\u2014\n(for example by using a character class like [-\\u2013\\u2014] in place of the\nhyphen in the range group) so gainValue extracts \"12–15\"/\"12—15\" correctly and\ngainSuffix still captures the trailing unit (falling back to \"points\" when\nabsent); keep the existing null/empty checks and whitespace handling.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439711","path":"client/src/components/ReportFixCard.tsx","line":91}]}},{"id":"PRRT_kwDOQC8mVc5eUJOP","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6Mh","databaseId":2438439713,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟡 Minor_\n\n**Fix ARIA usage on non-naming elements; add SR-only text**\n\naria-label on a generic div is not appropriate here and is redundant with visible text. Remove it and add an SR-only description.\n\n```diff\n-              {potentialGain && gainValue && (\n-                <div className=\"flex items-baseline gap-2\" aria-label={`Potential gain ${potentialGain}`}>\n+              {potentialGain && gainValue && (\n+                <div className=\"flex items-baseline gap-2\">\n                   <span className=\"metric-emphasis\">{gainValue}</span>\n                   <span className=\"text-sm font-semibold uppercase tracking-wide text-blue-700\">\n                     {gainSuffix}\n                   </span>\n+                  <span className=\"sr-only\">{`Potential gain ${potentialGain}`}</span>\n                 </div>\n               )}\n```\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 Biome (2.1.2)</summary>\n\n[error] 105-105: The ARIA attribute 'aria-label' is not supported by this element.\n\nEnsure that ARIA attributes are valid for the role of the element.\n\n(lint/a11y/useAriaPropsSupportedByRole)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/ReportFixCard.tsx around lines 103 to 112, remove the\naria-label attribute from the generic div (it's redundant and inappropriate on a\nnon-naming element) and instead add an SR-only text node inside that same\ncontainer describing the content for screen readers (e.g., a span with your\nproject's \"sr-only\" or \"visually-hidden\" class containing \"Potential gain:\n{potentialGain}\" or similar that uses the visible values); keep the visible\nmarkup (gainValue and gainSuffix) unchanged so sighted users see the info while\nscreen readers get the hidden descriptive text.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439713","path":"client/src/components/ReportFixCard.tsx","line":127}]}},{"id":"PRRT_kwDOQC8mVc5eUJOR","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6Mk","databaseId":2438439716,"author":{"login":"coderabbitai"},"body":"_🛠️ Refactor suggestion_ | _🟠 Major_\n\n**Convey impact level accessibly (replace invalid aria-label)**\n\nUse a semantic meter (or add role=\"img\"). Below uses a hidden <meter> and hides the visual dots from AT.\n\n```diff\n-              {potentialGain && (\n-                <div className=\"impact-dots\" aria-label={`Impact level ${impactLevel} of 5`}>\n+              {potentialGain && (\n+                <>\n+                <meter className=\"sr-only\" min={0} max={5} value={impactLevel}>\n+                  {`Impact level ${impactLevel} of 5`}\n+                </meter>\n+                <div className=\"impact-dots\" aria-hidden=\"true\">\n                   {Array.from({ length: 5 }).map((_, index) => (\n                     <span key={index} className={cn(\"impact-dot\", index < impactLevel && \"active\")} />\n                   ))}\n                 </div>\n+                </>\n               )}\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n                {potentialGain && (\n                <>\n                <meter className=\"sr-only\" min={0} max={5} value={impactLevel}>\n                  {`Impact level ${impactLevel} of 5`}\n                </meter>\n                <div className=\"impact-dots\" aria-hidden=\"true\">\n                  {Array.from({ length: 5 }).map((_, index) => (\n                    <span key={index} className={cn(\"impact-dot\", index < impactLevel && \"active\")} />\n                  ))}\n                </div>\n                </>\n              )}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🧰 Tools</summary>\n\n<details>\n<summary>🪛 Biome (2.1.2)</summary>\n\n[error] 113-113: The ARIA attribute 'aria-label' is not supported by this element.\n\nEnsure that ARIA attributes are valid for the role of the element.\n\n(lint/a11y/useAriaPropsSupportedByRole)\n\n</details>\n\n</details>\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/ReportFixCard.tsx around lines 113 to 118, the current\naria-label on the visual impact dots is invalid for conveying the impact level;\nreplace it with an accessible semantic indicator by adding a visually-hidden\n<meter> element (or an element with role=\"img\") that reflects the impactLevel\nvalue and range, and mark the decorative dot spans as aria-hidden=\"true\" (or\nhide them from AT) so only the semantic meter is announced; ensure the meter has\nappropriate min/max/value and an accessible label (e.g., visually-hidden text or\naria-label) describing \"Impact level X of 5.\"\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439716","path":"client/src/components/ReportFixCard.tsx","line":133}]}},{"id":"PRRT_kwDOQC8mVc5eUJOU","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6Mo","databaseId":2438439720,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Consider rel=\"nofollow\" for external docs**\n\nIf documentationLink points off-site, add nofollow to avoid passing link equity.\n\n```diff\n-              rel=\"noopener noreferrer\"\n+              rel=\"noopener noreferrer nofollow\"\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n          <div className=\"flex items-center gap-2 border-t border-slate-200 pt-3\">\n            <CheckCircle className=\"h-4 w-4 text-slate-400\" aria-hidden=\"true\" />\n            <a\n              href={documentationLink}\n              target=\"_blank\"\n              rel=\"noopener noreferrer nofollow\"\n              className=\"text-sm font-medium text-blue-600 hover:text-blue-800 hover:underline\"\n            >\n              Reference: {documentationLabel}\n            </a>\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn client/src/components/ReportFixCard.tsx around lines 169 to 178, the anchor\nto documentationLink should include rel=\"nofollow\" for off-site links; update\nthe component to detect whether documentationLink is external (e.g., parse new\nURL(documentationLink).hostname !== window.location.hostname or accept a prop\nflag) and, when external, set rel to \"noopener noreferrer nofollow\" (otherwise\nkeep \"noopener noreferrer\" or omit nofollow). Ensure target=\"_blank\" remains and\nhandle safe parsing (try/catch) so internal links are not marked nofollow.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439720","path":"client/src/components/ReportFixCard.tsx","line":193}]}},{"id":"PRRT_kwDOQC8mVc5eUJOW","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6Mt","databaseId":2438439725,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🔴 Critical_\n\n<details>\n<summary>🧩 Analysis chain</summary>\n\n**Double‑check Lighthouse Flags vs Config usage (onlyCategories, formFactor, maxWaitForLoad)**\n\nThese options can be version‑sensitive between Flags and Config. If any are not honored as Flags in your pinned LH version, pass them via the Node config instead to avoid silent misconfig.\n\nRun this web check to confirm for LH v12.x:\n\n\n\nIf any need to move to config, do this:\n\n```diff\n-    const lhOptions: LighthouseFlags = {\n-      port: chrome.port,\n-      logLevel: \"error\",\n-      output: \"json\",\n-      onlyCategories: [\"performance\"],\n-      formFactor: options.formFactor ?? \"mobile\",\n-      maxWaitForLoad: options.maxWaitForLoadMs ?? 45_000,\n-    };\n+    const lhOptions: LighthouseFlags = {\n+      port: chrome.port,\n+      logLevel: \"error\",\n+      output: \"json\",\n+    };\n+    const lhConfig = {\n+      extends: \"lighthouse:default\",\n+      settings: {\n+        formFactor: options.formFactor ?? \"mobile\",\n+        maxWaitForLoad: options.maxWaitForLoadMs ?? 45_000,\n+      },\n+      onlyCategories: [\"performance\"],\n+    } as const;\n```\n\nAnd call:\n\n```diff\n-    const runnerResult = await lighthouse(targetUrl, lhOptions);\n+    const runnerResult = await lighthouse(targetUrl, lhOptions, lhConfig);\n```\n\n---\n\n🌐 Web query:\n\n```web\nIn Lighthouse v12.x Node API, which options belong to Flags vs Config? Specifically, are \"onlyCategories\", \"formFactor\", and \"maxWaitForLoad\" valid Flags? Cite official docs.\n```\n\n💡 Result:\n\nShort answer\n- onlyCategories: can be passed as a Node \"flags\" option. [1]\n- formFactor: not a CLI/flags item — it belongs in the Lighthouse config (config.settings / configSettings). [2]\n- maxWaitForLoad: is a config/settings value (appears under config.settings / configSettings), not a Node CLI flag. [3]\n\nSources\n1) Lighthouse v3 migration / Node module notes (shows onlyCategories used as a flag in Node). [1]  \n2) PageSpeed/Lighthouse API configSettings (lists formFactor / onlyCategories as config settings). [2]  \n3) Lighthouse docs / LHR configSettings examples (shows maxWaitForLoad in configSettings). [3]\n\nReferences\n[1] https://developers.google.com/web/tools/lighthouse/v3-migration-guide  \n[2] https://developers.google.com/speed/docs/insights/rest/v5/pagespeedapi/runpagespeed  \n[3] https://ethcar.github.io/lighthouse/docs/understanding-results.html\n\n---\n\n\n\n</details>\n\nI need to verify the Lighthouse version pinned in the repository and get more specific v12.x documentation before finalizing the review.\n\nLet me check the repository to find the Lighthouse version and verify the code structure:\n\nBased on my verification of Lighthouse documentation and real-world usage examples, I can now provide the rewritten review comment:\n\n---\n\n**Move formFactor and maxWaitForLoad to config.settings (not flags)**\n\nonlyCategories can be shared between flags and config, but formFactor must always be set and maxWaitForLoad belongs in config.settings. These should not be top-level flags. Correct placement:\n\n```diff\n-    const lhOptions: LighthouseFlags = {\n-      port: chrome.port,\n-      logLevel: \"error\",\n-      output: \"json\",\n-      onlyCategories: [\"performance\"],\n-      formFactor: options.formFactor ?? \"mobile\",\n-      maxWaitForLoad: options.maxWaitForLoadMs ?? 45_000,\n-    };\n+    const lhOptions: LighthouseFlags = {\n+      port: chrome.port,\n+      logLevel: \"error\",\n+      output: \"json\",\n+    };\n+    const lhConfig = {\n+      extends: \"lighthouse:default\",\n+      settings: {\n+        onlyCategories: [\"performance\"],\n+        formFactor: options.formFactor ?? \"mobile\",\n+        maxWaitForLoad: options.maxWaitForLoadMs ?? 45_000,\n+      },\n+    };\n```\n\nThen pass config to lighthouse:\n\n```diff\n-    const runnerResult = await lighthouse(targetUrl, lhOptions);\n+    const runnerResult = await lighthouse(targetUrl, lhOptions, lhConfig);\n```\n\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/lighthouse-analyzer.ts around lines 57 to 70, the\nformFactor and maxWaitForLoad are incorrectly placed as top-level Lighthouse\nflags; move formFactor and maxWaitForLoad into a config.settings object and keep\nonlyCategories in the flags (or duplicate there if needed), then call lighthouse\nwith both flags and the new config. Concretely: create a config object with\nsettings: { formFactor: options.formFactor ?? \"mobile\", maxWaitForLoad:\noptions.maxWaitForLoadMs ?? 45_000 } ensure onlyCategories remains in\nlhOptions.flags, and pass both lhOptions and config to the lighthouse\ninvocation.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439725","path":"server/services/scanner/lighthouse-analyzer.ts","line":77}]}},{"id":"PRRT_kwDOQC8mVc5eUJOZ","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6Mu","databaseId":2438439726,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟡 Minor_\n\n**Guard chrome.kill() to avoid masking upstream errors**\n\nIf Chrome already exited, kill() can reject and hide the original failure. Wrap in try/catch.\n\n\n```diff\n   } finally {\n-    await chrome.kill();\n+    try {\n+      await chrome.kill();\n+    } catch {\n+      // ignore\n+    }\n   }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  } finally {\n    try {\n      await chrome.kill();\n    } catch {\n      // ignore\n    }\n  }\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/lighthouse-analyzer.ts around lines 96 to 99, the\nfinally block calls await chrome.kill() unguarded which can reject if Chrome\nalready exited and mask the original error; wrap the call in a try/catch so any\nerrors from chrome.kill() are caught and logged (or ignored) without overriding\nthe upstream error—e.g., perform try { await chrome.kill(); } catch (err) { /*\nlog.debug or noop */ } to ensure original exceptions are preserved.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439726","path":"server/services/scanner/lighthouse-analyzer.ts","line":106}]}},{"id":"PRRT_kwDOQC8mVc5eUJOc","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6Mz","databaseId":2438439731,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Status mapping is fine; “unknown” might be clearer than “error” for missing values**\n\nNot blocking. If UI distinguishes errors vs missing metrics, add an \"unknown\" state.\n\n\nConfirm UI expectations before changing the union.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/lighthouse-analyzer.ts around lines 178 to 195, the\nfunction evaluateMetricStatus treats null/NaN metric values as \"error\" which\nconflates missing/unknown metrics with real errors; if the UI expects a distinct\n\"unknown\" state, change the function to return \"unknown\" for value === null ||\nNumber.isNaN(value), then update the MetricStatus union/type to include\n\"unknown\", adjust all callers/consumers (including any switch/case or UI render\nlogic) to handle \"unknown\", and add/update unit tests to cover the new branch;\nconfirm UI expectations before applying the type change.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439731","path":"server/services/scanner/lighthouse-analyzer.ts","line":222}]}},{"id":"PRRT_kwDOQC8mVc5eUJOe","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6M1","databaseId":2438439733,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Minor: show 3 decimals for CLS for better fidelity**\n\nCLS is a small fractional score; two decimals can mask variance. Use 3 decimals for unit \"score\".\n\n\n```diff\n-  return value.toFixed(2);\n+  return unit === \"score\" ? value.toFixed(3) : value.toFixed(2);\n```\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/lighthouse-analyzer.ts around lines 197 to 209, the\nformatter uses two decimal places for all non-ms units which under-represents\nsmall fractional metrics like CLS; update the function to return three decimal\nplaces when unit === \"score\" (e.g., use value.toFixed(3)) while keeping the\nexisting ms formatting and the default two-decimal formatting for other units\nunchanged.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439733","path":"server/services/scanner/lighthouse-analyzer.ts","line":243}]}},{"id":"PRRT_kwDOQC8mVc5eUJOf","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6M2","databaseId":2438439734,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Do not force --no-sandbox by default; gate it for CI/root only and add a Chrome path fallback**\n\nUnconditional --no-sandbox weakens isolation on shared hosts. Also add a fallback when Playwright’s Chromium isn’t installed so chrome‑launcher can auto‑discover Chrome.\n\n\n\n\n```diff\n async function launchChrome(): Promise<LaunchedChrome> {\n-  const executablePath = chromium.executablePath();\n-  const chromeFlags = [\n-    \"--headless=new\",\n-    \"--no-sandbox\",\n-    \"--disable-dev-shm-usage\",\n-    \"--disable-gpu\",\n-  ];\n+  let executablePath: string | undefined;\n+  try {\n+    executablePath = chromium.executablePath();\n+  } catch {\n+    // Fallback: let chrome-launcher locate Chrome on PATH.\n+    executablePath = undefined;\n+  }\n+  const chromeFlags = [\n+    \"--headless=new\",\n+    ...(shouldUseNoSandbox() ? [\"--no-sandbox\"] : []),\n+    \"--disable-dev-shm-usage\",\n+    \"--disable-gpu\",\n+  ];\n \n   return launch({\n     chromePath: executablePath,\n     chromeFlags,\n   });\n }\n+\n+function shouldUseNoSandbox(): boolean {\n+  return process.getuid?.() === 0 || process.env.CI === \"true\";\n+}\n```\n\nOperational note: consider reusing a single Chrome instance across multiple audits to reduce cold‑start overhead under load.\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439734","path":"server/services/scanner/lighthouse-analyzer.ts","line":null}]}},{"id":"PRRT_kwDOQC8mVc5eUJOh","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6M4","databaseId":2438439736,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Classify timeouts correctly (network-timeout vs fetch)**\n\nCurrent logic checks robotsTxt.status, but fetchTextResource always returns status \"error\" on aborts, so network-timeout is never emitted. Track timeouts explicitly and branch on that.\n\n```diff\n-export interface ResourceSummary {\n+export interface ResourceSummary {\n   url: string;\n   status: \"ok\" | \"missing\" | \"error\";\n   statusCode?: number;\n   error?: string;\n   contentPreview?: string;\n+  timedOut?: boolean;\n }\n@@\n-  const robotsTxt = await fetchTextResource(robotsUrl, fetchTimeoutMs);\n+  const robotsTxt = await fetchTextResource(robotsUrl, fetchTimeoutMs);\n   if (robotsTxt.error) {\n     issues.push({\n-      type: robotsTxt.status === \"error\" ? \"fetch\" : \"network-timeout\",\n+      type: robotsTxt.timedOut ? \"network-timeout\" : \"fetch\",\n       message: robotsTxt.error,\n       url: robotsUrl,\n     });\n   }\n```\nAlso apply the same timedOut check where you push issues for sitemaps and indexNow.\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/schema-analyzer.ts around lines 81 to 92, the current\nlogic treats any aborted fetch as status \"error\" so network timeouts are never\nclassified; modify the fetchTextResource handling to detect and propagate a\ntimedOut flag (or check a timedOut property returned by fetchTextResource) and\nuse that to set issue.type to \"network-timeout\" when true otherwise \"fetch\";\nupdate the same pattern where issues are pushed for sitemaps and indexNow so\nthey also branch on the timedOut flag instead of robotsTxt.status.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439736","path":"server/services/scanner/schema-analyzer.ts","line":105}]}},{"id":"PRRT_kwDOQC8mVc5eUJOk","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6M9","databaseId":2438439741,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Resolve robots-discovered sitemap URLs against origin**\n\nRobots entries may be relative. Normalize them to absolute URLs.\n\n```diff\n-  if (robotsTxt.contentPreview) {\n-    extractSitemapsFromRobots(robotsTxt.contentPreview).forEach((url) =>\n-      discoveredSitemaps.add(url),\n-    );\n-  }\n+  if (robotsTxt.contentPreview) {\n+    extractSitemapsFromRobots(robotsTxt.contentPreview).forEach((u) => {\n+      const abs = resolveAgainstOrigin(u, normalized.origin);\n+      discoveredSitemaps.add(abs);\n+    });\n+  }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const discoveredSitemaps = new Set<string>();\n  if (robotsTxt.contentPreview) {\n    extractSitemapsFromRobots(robotsTxt.contentPreview).forEach((u) => {\n      const abs = resolveAgainstOrigin(u, normalized.origin);\n      discoveredSitemaps.add(abs);\n    });\n  }\n\n  const defaultSitemap = resolveAgainstOrigin(\"/sitemap.xml\", normalized.origin);\n  discoveredSitemaps.add(defaultSitemap);\n\n  const sitemapResults: SitemapCheck[] = [];\n  for (const sitemapUrl of Array.from(discoveredSitemaps)) {\n    const result = await fetchHeadResource(sitemapUrl, fetchTimeoutMs);\n    if (result.error) {\n      issues.push({\n        type: result.status === \"error\" ? \"fetch\" : \"network-timeout\",\n        message: result.error,\n        url: sitemapUrl,\n      });\n    }\n\n    sitemapResults.push(result);\n  }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/schema-analyzer.ts around lines 93 to 115, the\nsitemap URLs extracted from robots.txt may be relative and must be normalized to\nabsolute URLs; when calling extractSitemapsFromRobots, resolve each returned URL\nagainst normalized.origin (e.g. via resolveAgainstOrigin(url,\nnormalized.origin)) before adding to discoveredSitemaps so all entries are\nabsolute and de-duplicated; keep adding the default \"/sitemap.xml\" as before and\nthen continue fetching sitemapResults.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439741","path":"server/services/scanner/schema-analyzer.ts","line":128}]}},{"id":"PRRT_kwDOQC8mVc5eUJOo","isResolved":true,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6NB","databaseId":2438439745,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟡 Minor_\n\n**Refine LocalBusiness heuristic to avoid false positives**\n\nCounting any type containing “service” as LocalBusiness overstates coverage and collides with Service detection. Remove the “service” check.\n\n```diff\n function isLocalBusinessType(type: string): boolean {\n   const normalized = type.toLowerCase();\n   return (\n     normalized === \"localbusiness\" ||\n     normalized.endsWith(\"business\") ||\n-    normalized.includes(\"store\") ||\n-    normalized.includes(\"service\")\n+    normalized.includes(\"store\")\n   );\n }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\nfunction isLocalBusinessType(type: string): boolean {\n  const normalized = type.toLowerCase();\n  return (\n    normalized === \"localbusiness\" ||\n    normalized.endsWith(\"business\") ||\n    normalized.includes(\"store\")\n  );\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/schema-analyzer.ts around lines 255 to 263, the\nLocalBusiness heuristic currently treats any type containing \"service\" as a\nLocalBusiness which causes false positives and conflicts with Service detection;\nremove the normalized.includes(\"service\") check from the returned condition so\nonly explicit \"localbusiness\", types ending with \"business\", or those containing\n\"store\" are treated as LocalBusiness, and keep the rest of the function\nunchanged.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n✅ Addressed in commit c22a7aa","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439745","path":"server/services/scanner/schema-analyzer.ts","line":311}]}},{"id":"PRRT_kwDOQC8mVc5eUJOr","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6NE","databaseId":2438439748,"author":{"login":"coderabbitai"},"body":"_🛠️ Refactor suggestion_ | _🟠 Major_\n\n**Return timedOut flag from fetchTextResource**\n\nDetect AbortError and set timedOut for accurate issue typing.\n\n```diff\n-  try {\n+  try {\n     const response = await fetch(url, { signal: controller.signal });\n@@\n-  } catch (error) {\n+  } catch (error) {\n+    const isAbort = (error as any)?.name === \"AbortError\";\n     return {\n       url,\n-      status: error instanceof DOMException && error.name === \"AbortError\"\n-        ? \"error\"\n-        : \"error\",\n-      error: error instanceof Error ? error.message : \"Unknown fetch error\",\n+      status: \"error\",\n+      error: isAbort ? \"Request timed out\" : (error instanceof Error ? error.message : \"Unknown fetch error\"),\n+      timedOut: isAbort,\n     };\n   } finally {\n     clearTimeout(timer);\n   }\n```\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/schema-analyzer.ts around lines 279 to 315,\nfetchTextResource currently treats all errors the same and doesn’t indicate a\ntimeout; modify the returned ResourceSummary objects so they include a timedOut\nboolean: set timedOut: false on successful responses and non-timeout error\nresponses (including 404), and in the catch block detect AbortError (error\ninstanceof DOMException && error.name === \"AbortError\") and return timedOut:\ntrue along with the existing error fields; ensure the type ResourceSummary is\nupdated if necessary to include timedOut.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439748","path":"server/services/scanner/schema-analyzer.ts","line":382}]}},{"id":"PRRT_kwDOQC8mVc5eUJOu","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6NH","databaseId":2438439751,"author":{"login":"coderabbitai"},"body":"_🛠️ Refactor suggestion_ | _🟠 Major_\n\n**Propagate timedOut via fetchHeadResource (HEAD/GET)**\n\nMirror the timeout flag so callers can classify issues.\n\n```diff\n-  } catch (error) {\n+  } catch (error) {\n+    const isAbort = (error as any)?.name === \"AbortError\";\n     return {\n       url,\n-      status: \"error\",\n-      error: error instanceof Error ? error.message : \"Unknown fetch error\",\n+      status: \"error\",\n+      error: isAbort ? \"Request timed out\" : (error instanceof Error ? error.message : \"Unknown fetch error\"),\n+      timedOut: isAbort,\n     };\n   } finally {\n```\nAnd when pushing sitemap/indexNow issues:\n```diff\n-        type: result.status === \"error\" ? \"fetch\" : \"network-timeout\",\n+        type: result.timedOut ? \"network-timeout\" : \"fetch\",\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/schema-analyzer.ts around lines 317 to 368,\nfetchHeadResource needs to propagate a timedOut boolean on every returned\nSitemapCheck so callers can classify timeout vs other errors; update every\nreturn to include timedOut: false by default for successful/responsive cases and\ntimedOut: true when the request was aborted due to the timeout (detect\nAbortError via error.name === 'AbortError' or controller.signal.aborted), and\nensure the HEAD->GET fallback also returns timedOut correctly when the GET is\naborted; also include timedOut when returning error results from non-2xx\nresponses only if the abort occurred, otherwise false.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439751","path":"server/services/scanner/schema-analyzer.ts","line":null}]}},{"id":"PRRT_kwDOQC8mVc5eUJO1","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6NO","databaseId":2438439758,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟡 Minor_\n\n**Set websiteAnswerability.base to WEBSITE_MAX (not 0)**\n\nDebug output should mirror max scoring capacity for consistency with technical.base.\n\n```diff\n-    websiteAnswerability: {\n-      base: 0,\n+    websiteAnswerability: {\n+      base: WEBSITE_MAX,\n       final: websiteAnswerability.final,\n       contributions: websiteAnswerability.contributions,\n       notes: websiteAnswerability.notes,\n     },\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const debug: ScoreCalculatorDebug = {\n    technical: {\n      base: TECHNICAL_MAX,\n      final: technical.final,\n      penalties: technical.penalties,\n      notes: technical.notes,\n    },\n    websiteAnswerability: {\n      base: WEBSITE_MAX,\n      final: websiteAnswerability.final,\n      contributions: websiteAnswerability.contributions,\n      notes: websiteAnswerability.notes,\n    },\n  };\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/score-calculator.ts around lines 92 to 105 the debug\nobject sets websiteAnswerability.base to 0 but it should reflect the max\npossible score like technical.base; change websiteAnswerability.base from 0 to\nWEBSITE_MAX so debug output mirrors the scoring capacity, ensuring WEBSITE_MAX\nis in scope or imported if necessary.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439758","path":"server/services/scanner/score-calculator.ts","line":111}]}},{"id":"PRRT_kwDOQC8mVc5eUJO3","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6NU","databaseId":2438439764,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Optional: bounded concurrency for targets**\n\nCrawling sequentially can be slow. Consider a small concurrency pool (e.g., p-limit 3–5) to improve throughput while controlling resource use.\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439764","path":"server/services/scanner/website-crawler.ts","line":124}]}},{"id":"PRRT_kwDOQC8mVc5eUJO7","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6NX","databaseId":2438439767,"author":{"login":"coderabbitai"},"body":"_🛠️ Refactor suggestion_ | _🟠 Major_\n\n**Normalize canonical to absolute URL**\n\nCanonical may be relative. Resolve against finalUrl.\n\n```diff\n-        const meta = await extractMeta(page);\n+        const meta = await extractMeta(page);\n+        if (meta.canonical) {\n+          try {\n+            meta.canonical = new URL(meta.canonical, finalUrl).toString();\n+          } catch {\n+            // leave as-is if invalid\n+          }\n+        }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        const finalUrl = response?.url() ?? page.url();\n        const status = response?.status() ?? null;\n        const ok = typeof status === \"number\" ? status < 400 : false;\n        const redirected = finalUrl !== targetUrl;\n        const meta = await extractMeta(page);\n        if (meta.canonical) {\n          try {\n            meta.canonical = new URL(meta.canonical, finalUrl).toString();\n          } catch {\n            // leave as-is if invalid\n          }\n        }\n        const headings = await extractHeadings(page);\n        const htmlContent = await page.content();\n        const htmlTruncated = htmlContent.length > maxHtmlBytes;\n        const html = htmlTruncated\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/website-crawler.ts around lines 112 to 120, the\nmeta.canonical value extracted from the page may be a relative URL; resolve it\nagainst finalUrl to produce an absolute canonical URL. After calling\nextractMeta(page), check if meta.canonical exists and is not already absolute,\nthen create an absolute URL by using the URL constructor with meta.canonical and\nfinalUrl (handling any errors and falling back to the original canonical value\nif resolution fails); replace meta.canonical with the resolved absolute string\nso downstream logic always gets an absolute canonical URL.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439767","path":"server/services/scanner/website-crawler.ts","line":134}]}},{"id":"PRRT_kwDOQC8mVc5eUJO8","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6NZ","databaseId":2438439769,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Align htmlBytes with stored html (byte/char mismatch)**\n\nhtmlBytes reports the full, untruncated size while html may be truncated. Compute bytes from the stored html.\n\n```diff\n-        const htmlTruncated = htmlContent.length > maxHtmlBytes;\n-        const html = htmlTruncated\n-          ? htmlContent.slice(0, maxHtmlBytes)\n-          : htmlContent;\n+        const htmlTruncated = Buffer.byteLength(htmlContent, \"utf-8\") > maxHtmlBytes;\n+        let html = htmlContent;\n+        if (htmlTruncated) {\n+          // Truncate by bytes to avoid splitting multi-byte chars.\n+          const buf = Buffer.from(htmlContent, \"utf-8\");\n+          html = buf.subarray(0, maxHtmlBytes).toString(\"utf-8\");\n+        }\n...\n-          htmlBytes: Buffer.byteLength(htmlContent, \"utf-8\"),\n+          htmlBytes: Buffer.byteLength(html, \"utf-8\"),\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        const htmlContent = await page.content();\n        const htmlTruncated = Buffer.byteLength(htmlContent, \"utf-8\") > maxHtmlBytes;\n        let html = htmlContent;\n        if (htmlTruncated) {\n          // Truncate by bytes to avoid splitting multi-byte chars.\n          const buf = Buffer.from(htmlContent, \"utf-8\");\n          html = buf.subarray(0, maxHtmlBytes).toString(\"utf-8\");\n        }\n        const headers = response?.headers() ?? {};\n        const contentType = headers[\"content-type\"];\n\n        const screenshotBase64 = options.captureScreenshots\n          ? await captureScreenshot(page)\n          : undefined;\n\n        pages.push({\n          label: target.label,\n          path: target.path,\n          url: targetUrl,\n          finalUrl,\n          status,\n          ok,\n          redirected,\n          fetchedAt: new Date().toISOString(),\n          meta,\n          headings,\n          html,\n          htmlBytes: Buffer.byteLength(html, \"utf-8\"),\n          htmlTruncated,\n          contentType,\n          screenshotBase64,\n        });\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/website-crawler.ts around lines 118 to 146, htmlBytes\nis computed from the full htmlContent while the html value may be truncated;\nchange the byte-size computation to use the stored html variable (i.e.,\nBuffer.byteLength(html, \"utf-8\")) so htmlBytes reflects the actual stored html\nbytes, preserving the existing logic for htmlTruncated and html assignment.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439769","path":"server/services/scanner/website-crawler.ts","line":160}]}},{"id":"PRRT_kwDOQC8mVc5eUJPA","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6Ng","databaseId":2438439776,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Isolate screenshot errors; don’t discard the whole page**\n\nIf screenshot fails, record a screenshot-stage issue but keep the page data.\n\n```diff\n-        const screenshotBase64 = options.captureScreenshots\n-          ? await captureScreenshot(page)\n-          : undefined;\n+        let screenshotBase64: string | undefined = undefined;\n+        if (options.captureScreenshots) {\n+          try {\n+            screenshotBase64 = await captureScreenshot(page);\n+          } catch (err) {\n+            issues.push({\n+              path: target.path,\n+              url: targetUrl,\n+              stage: \"screenshot\",\n+              reason: err instanceof Error ? err.message : \"Unknown screenshot error\",\n+            });\n+          }\n+        }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        let screenshotBase64: string | undefined = undefined;\n        if (options.captureScreenshots) {\n          try {\n            screenshotBase64 = await captureScreenshot(page);\n          } catch (err) {\n            issues.push({\n              path: target.path,\n              url: targetUrl,\n              stage: \"screenshot\",\n              reason: err instanceof Error ? err.message : \"Unknown screenshot error\",\n            });\n          }\n        }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/website-crawler.ts around lines 126 to 129, the\ncurrent code awaits captureScreenshot and will drop the whole page flow if\nscreenshoting throws; wrap the captureScreenshot call in a try/catch so that\nscreenshot failures are caught and do not propagate, set screenshotBase64 to\nundefined on error, and record a screenshot-stage issue (e.g., push a structured\nerror object to the page's issues array or call the existing issue-logging\nhelper) including the error message and context; then continue processing the\npage as normal.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439776","path":"server/services/scanner/website-crawler.ts","line":143}]}},{"id":"PRRT_kwDOQC8mVc5eUJPD","isResolved":true,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RV6Nk","databaseId":2438439780,"author":{"login":"coderabbitai"},"body":"_🧹 Nitpick_ | _🔵 Trivial_\n\n**Normalize and dedupe targets more robustly**\n\nTrim, ensure leading slash, and normalize trailing slashes so “/contact” and “/contact/” don’t duplicate.\n\n```diff\n-function normalizeTargets(targets: CrawlTarget[]): { path: string; label?: string }[] {\n+function normalizeTargets(targets: CrawlTarget[]): { path: string; label?: string }[] {\n   const seen = new Set<string>();\n\n   return targets\n     .map((target) =>\n       typeof target === \"string\" ? { path: target, label: undefined } : target,\n     )\n     .filter((target) => {\n-      if (!target.path) {\n+      const raw = (target.path ?? \"\").trim();\n+      if (!raw) {\n         return false;\n       }\n-\n-      const key = target.path.trim();\n+      const normalizedPath =\n+        raw.startsWith(\"/\") ? raw : `/${raw}`;\n+      const key = normalizedPath === \"/\" ? \"/\" : normalizedPath.replace(/\\/+$/, \"\");\n       if (seen.has(key)) {\n         return false;\n       }\n-\n-      seen.add(key);\n-      return true;\n+      seen.add(key);\n+      target.path = key;\n+      return true;\n     });\n }\n```\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/website-crawler.ts around lines 190 to 210, the\nnormalizeTargets function should trim paths, ensure a leading slash, and\nnormalize trailing slashes so \"/contact\" and \"/contact/\" are treated the same;\nupdate the mapping step to produce a normalizedPath (trim whitespace, if empty\nreturn false, prepend \"/\" if missing, remove trailing slash unless the path is\nexactly \"/\"), use that normalizedPath as the dedupe key stored in the seen Set,\nreturn objects that keep the original label but replace path with the\nnormalizedPath, and filter out duplicates and empty paths accordingly.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n✅ Addressed in commit c22a7aa","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2438439780","path":"server/services/scanner/website-crawler.ts","line":232}]}},{"id":"PRRT_kwDOQC8mVc5eY6w3","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RcwUP","databaseId":2440234255,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**onComplete/onError can fire multiple times; guard with refs.**\n\nEffect depends on callback identities; parent re-renders can re‑invoke callbacks with terminal status.\n\n\n\n```diff\n export default function ScanProgress({\n   status,\n   onComplete,\n   onError,\n   statusMessage,\n   duration = 8000,\n }: ScanProgressProps) {\n   const [currentStage, setCurrentStage] = useState(0);\n   const [progress, setProgress] = useState(0);\n+  const didCompleteRef = useRef(false);\n+  const didErrorRef = useRef(false);\n@@\n-  useEffect(() => {\n-    if (status === \"completed\") {\n-      setProgress(100);\n-      setCurrentStage(scanStages.length - 1);\n-      onComplete?.();\n-    } else if (status === \"failed\") {\n-      setProgress(100);\n-      onError?.(statusMessage);\n-    }\n-  }, [status, statusMessage, onComplete, onError]);\n+  useEffect(() => {\n+    if (status === \"completed\" && !didCompleteRef.current) {\n+      didCompleteRef.current = true;\n+      setProgress(100);\n+      setCurrentStage(scanStages.length - 1);\n+      onComplete?.();\n+    } else if (status === \"failed\" && !didErrorRef.current) {\n+      didErrorRef.current = true;\n+      setProgress(100);\n+      onError?.(statusMessage);\n+    }\n+  }, [status, statusMessage, onComplete, onError]);\n```\n\nOptional: set `aria-busy={status !== \"completed\" && status !== \"failed\"}`. <!-- As per coding guidelines -->\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<!-- fingerprinting:phantom:medusa:chinchilla -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2440234255","path":"client/src/components/ScanProgress.tsx","line":75}]}},{"id":"PRRT_kwDOQC8mVc5eY6w7","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RcwUV","databaseId":2440234261,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🟠 Major_\n\n**Fix mutually exclusive LCP/INP logic.**\n\nThe `else if` at line 35 prevents generating an INP fix card when LCP also needs improvement. Both metrics can be suboptimal simultaneously.\n\n\n\nApply this diff:\n\n```diff\n   if (lcpMetric.status !== \"good\") {\n     addCard(createLcpFixCard(lcpMetric.displayValue));\n-  } else if (inpMetric.status !== \"good\") {\n+  }\n+  if (inpMetric.status !== \"good\") {\n     addCard(createInpFixCard(inpMetric.displayValue));\n   }\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>📝 Committable suggestion</summary>\n\n> ‼️ **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  if (lcpMetric.status !== \"good\") {\n    addCard(createLcpFixCard(lcpMetric.displayValue));\n  }\n  if (inpMetric.status !== \"good\") {\n    addCard(createInpFixCard(inpMetric.displayValue));\n  }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/fix-card-generator.ts around lines 33 to 37, the\ncurrent `else if` makes LCP and INP checks mutually exclusive so an INP fix card\nwon’t be generated if LCP is also bad; change the logic to perform two\nindependent checks (i.e., replace the `else if` with a separate `if`) so both\ncreateLcpFixCard and createInpFixCard can be added when each metric.status !==\n\"good\"; keep the same addCard/create* calls and ordering as needed.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2440234261","path":"server/services/scanner/fix-card-generator.ts","line":37}]}},{"id":"PRRT_kwDOQC8mVc5eY6xF","isResolved":false,"comments":{"nodes":[{"id":"PRRC_kwDOQC8mVc6RcwUk","databaseId":2440234276,"author":{"login":"coderabbitai"},"body":"_⚠️ Potential issue_ | _🔴 Critical_\n\n**Fix unclosed JSDoc comment.**\n\nThe JSDoc block starting at line 47 is missing the closing `*/` delimiter before the function declaration.\n\n\n\nApply this diff:\n\n```diff\n /**\n  * Computes readiness scores from Lighthouse and schema analysis and aggregates them into overall, per-component, and debug outputs.\n  *\n  * @param input - Aggregated analysis inputs containing `lighthouse` and `schema` results used to compute sub-scores.\n  * @returns An object with `overallScore` (integer percentage 0–100), `subScores` (per-component scores and descriptions for listings, website answerability, technical, and NAP consistency), and `debug` (detailed technical penalties, website contributions, base/final values, and notes).\n- */\n+ */\n export function calculateReadinessScores(\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>🤖 Prompt for AI Agents</summary>\n\n```\nIn server/services/scanner/score-calculator.ts around line 19, there is an\nunclosed JSDoc comment (the block that begins at line ~47 is missing the closing\n\"*/\") — close the JSDoc by adding the missing \"*/\" before the subsequent\nfunction declaration so the docblock is properly terminated and the function\ncompiles/parses correctly.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->","url":"https://github.com/benvenker/localvantage/pull/1#discussion_r2440234276","path":"server/services/scanner/score-calculator.ts","line":19}]}}],"pageInfo":{"hasNextPage":false,"endCursor":"Y3Vyc29yOnYyOpK0MjAyNS0xMC0xN1QxNDozMjoxNVrOXmOsRQ=="}}}}}}